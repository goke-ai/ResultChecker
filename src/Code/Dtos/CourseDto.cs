//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ark.ResultCheckers.Dtos
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Linq.Expressions;
    using Ark.ResultCheckers.Entities;
    
    public partial class CourseDto : BaseEntityDto
    {
        public CourseDto()
        {
    		
            OnInitialize();
        }
    
        partial void OnInitialize();
    
        [Required(ErrorMessage = "The Code is a mandatory Field.")]
    	[Display(Name = "Code")]
    	public string Code { get; set; }
        [Required(ErrorMessage = "The Title is a mandatory Field.")]
    	[Display(Name = "Title")]
    	public string Title { get; set; }
        [Display(Name = "Unit")]
    	public double Unit { get; set; }
    	private static Expression<Func<Course, CourseDto>> _asCourseDto;
        public static Expression<Func<Course, CourseDto>> AsCourseDto
        {
            get
            {
                SetConverters();
                return _asCourseDto;
            }
        }
        
        private static Func<Course, CourseDto> _asCourseDtoFunc;
        public static Func<Course, CourseDto> AsCourseDtoFunc
        {
            get
            {
                SetConverters();
                return _asCourseDtoFunc;
            }
        }
        
        private static Expression<Func<CourseDto, Course>> _asCourse;
        public static Expression<Func<CourseDto, Course>> AsCourse
        {
            get
            {
                SetConverters();
                return _asCourse;
            }
        }
        
        private static Func<CourseDto, Course> _asCourseFunc;
        public static Func<CourseDto, Course> AsCourseFunc
        {
            get
            {
                SetConverters();
                return _asCourseFunc;
            }
        }
    
    	private static Func<Course, CourseDto, Course> _toCourseFunc;
        public static Func<Course, CourseDto, Course> ToCourseFunc
        {
            get
            {
                SetConverters();
                return _toCourseFunc;
            }
        }
    
    	/*
    	private static Expression<Func<Course, string>> _orderCourse;
        public static Expression<Func<Course, string>> OrderCourse
        {
            get
            {
                SetConverters();
                return _orderCourse;
            }
        }
    	*/
    
    	private static Expression<Func<Course, bool>> SearchExpression(string searchString)
        {
            return 
    				w => w.Id.ToString().Contains(searchString) 
    			|| w.Code.Contains(searchString) //@string
    			|| w.Title.Contains(searchString) //@string
    			;
        }
    
        static IQueryable<Course> _searchQuery;
        public static IQueryable<Course> Search(IQueryable<Course> query, string searchString)
        {
            _searchQuery = query.Where(
    						SearchExpression(searchString)
    					);
    		OnSetSearchQuery(query, searchString);
    		return _searchQuery;
    	}
    
        static IOrderedQueryable<Course> _orderQuery;
        public static IOrderedQueryable<Course> OrderBy(IQueryable<Course> query)
        {
    		_orderQuery = query.OrderBy(o => o.Id);
    		OnSetOrderQuery(query);
            return _orderQuery;
        }
    
        static IOrderedQueryable<CourseDto> _orderQueryDto;
        public static IOrderedQueryable<CourseDto> OrderBy(IQueryable<CourseDto> query)
        {
    		_orderQueryDto = query.OrderBy(o => o.Id);
            OnSetOrderQuery(query);
            return _orderQueryDto;
        }
    
    	static string[] _includeNavigations;
        public static string[] IncludeNavigations()
        {
            _includeNavigations = new string[] { 
    		};
            OnSetIncludeNavigations();
            return _includeNavigations;
        }
    
        static Expression<Func<Course, bool>>[] _filters;
        public static Expression<Func<Course, bool>>[] Filters(string searchString)
        {
            _filters = new Expression<Func<Course, bool>>[]
    					   {
    							SearchExpression(searchString)
    
    					   };
            OnSetFilters(searchString);
            return _filters;
        }
    
    
    	private static void SetConverters()
        {
            _asCourseDto = x => new CourseDto
            {
                
                Id = x.Id,
    			// +simplex
    			Code = x.Code,
    			Title = x.Title,
    			Unit = x.Unit,
                
                IsVisible = x.IsVisible,
                InsertUser = x.InsertUser,
                InsertDateTime = x.InsertDateTime,
                UpdateUser = x.UpdateUser,
                UpdateDateTime = x.UpdateDateTime,
                LastActivityUser = x.LastActivityUser,
                LastActivityDateTime = x.LastActivityDateTime,
                Version = x.Version
            };
    
            _asCourse = x => new Course
            {
                
                Id = x.Id,
    			// +simple
    			Code = x.Code,
    			Title = x.Title,
    			Unit = x.Unit,
                
                IsVisible = x.IsVisible,
                InsertUser = x.InsertUser,
                InsertDateTime = x.InsertDateTime,
                UpdateUser = x.UpdateUser,
                UpdateDateTime = x.UpdateDateTime,
                LastActivityUser = x.LastActivityUser,
                LastActivityDateTime = x.LastActivityDateTime,
                Version = x.Version
                 
            };
    
            _toCourseFunc = (y,x) => {
                
                y.Id = x.Id;
    			// +simple
    			y.Code = x.Code;
    			y.Title = x.Title;
    			y.Unit = x.Unit;
                
                y.IsVisible = x.IsVisible;
                y.InsertUser = x.InsertUser;
                y.InsertDateTime = x.InsertDateTime;
                y.UpdateUser = x.UpdateUser;
                y.UpdateDateTime = x.UpdateDateTime;
                y.LastActivityUser = x.LastActivityUser;
                y.LastActivityDateTime = x.LastActivityDateTime;
                // y.Version = x.Version;
          
    			return y;
            };
    
            OnSetConverters();
    
            _asCourseFunc = _asCourse.Compile();
            _asCourseDtoFunc = _asCourseDto.Compile();
        }
    
        static partial void OnSetConverters();
        static partial void OnSetOrderQuery(IQueryable<Course> query);
        static partial void OnSetOrderQuery(IQueryable<CourseDto> query);
        static partial void OnSetSearchQuery(IQueryable<Course> query, string searchString);
        static partial void OnSetOrders();
        static partial void OnSetIncludeNavigations();
        static partial void OnSetFilters(string searchString);
    }
}
