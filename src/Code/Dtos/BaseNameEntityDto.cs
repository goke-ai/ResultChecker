//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ark.ResultCheckers.Dtos
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Linq.Expressions;
    using Ark.ResultCheckers.Entities;
    
    public partial class BaseNameEntityDto : BaseEntityDto
    {
        public BaseNameEntityDto()
        {
    		
            OnInitialize();
        }
    
        partial void OnInitialize();
    
        [Required(ErrorMessage = "The Name is a mandatory Field.")]
    	[MaxLength(100), StringLength(100, ErrorMessage = "The Name value cannot exceed 100 characters.")]
    	[Display(Name = "Name")]
    	public string Name { get; set; }
    	private static Expression<Func<BaseNameEntity, BaseNameEntityDto>> _asBaseNameEntityDto;
        public static Expression<Func<BaseNameEntity, BaseNameEntityDto>> AsBaseNameEntityDto
        {
            get
            {
                SetConverters();
                return _asBaseNameEntityDto;
            }
        }
        
        private static Func<BaseNameEntity, BaseNameEntityDto> _asBaseNameEntityDtoFunc;
        public static Func<BaseNameEntity, BaseNameEntityDto> AsBaseNameEntityDtoFunc
        {
            get
            {
                SetConverters();
                return _asBaseNameEntityDtoFunc;
            }
        }
        
        private static Expression<Func<BaseNameEntityDto, BaseNameEntity>> _asBaseNameEntity;
        public static Expression<Func<BaseNameEntityDto, BaseNameEntity>> AsBaseNameEntity
        {
            get
            {
                SetConverters();
                return _asBaseNameEntity;
            }
        }
        
        private static Func<BaseNameEntityDto, BaseNameEntity> _asBaseNameEntityFunc;
        public static Func<BaseNameEntityDto, BaseNameEntity> AsBaseNameEntityFunc
        {
            get
            {
                SetConverters();
                return _asBaseNameEntityFunc;
            }
        }
    
    	private static Func<BaseNameEntity, BaseNameEntityDto, BaseNameEntity> _toBaseNameEntityFunc;
        public static Func<BaseNameEntity, BaseNameEntityDto, BaseNameEntity> ToBaseNameEntityFunc
        {
            get
            {
                SetConverters();
                return _toBaseNameEntityFunc;
            }
        }
    
    	/*
    	private static Expression<Func<BaseNameEntity, string>> _orderBaseNameEntity;
        public static Expression<Func<BaseNameEntity, string>> OrderBaseNameEntity
        {
            get
            {
                SetConverters();
                return _orderBaseNameEntity;
            }
        }
    	*/
    
    	private static Expression<Func<BaseNameEntity, bool>> SearchExpression(string searchString)
        {
            return 
    				w => w.Id.ToString().Contains(searchString) 
    			|| w.Name.Contains(searchString) //@string
    			;
        }
    
        static IOrderedQueryable<BaseNameEntity> _orderQuery;
        public static IOrderedQueryable<BaseNameEntity> OrderBy(IQueryable<BaseNameEntity> query)
        {
    		_orderQuery = query.OrderBy(o => o.Id);
    		OnSetOrderQuery(query);
            return _orderQuery;
        }
    
        static IOrderedQueryable<BaseNameEntityDto> _orderQueryDto;
        public static IOrderedQueryable<BaseNameEntityDto> OrderBy(IQueryable<BaseNameEntityDto> query)
        {
    		_orderQueryDto = query.OrderBy(o => o.Id);
            OnSetOrderQuery(query);
            return _orderQueryDto;
        }
    
    
    	private static void SetConverters()
        {
            _asBaseNameEntityDto = x => new BaseNameEntityDto
            {
                
                Id = x.Id,
    			// +simplex
    			Name = x.Name,
                
                IsVisible = x.IsVisible,
                InsertUser = x.InsertUser,
                InsertDateTime = x.InsertDateTime,
                UpdateUser = x.UpdateUser,
                UpdateDateTime = x.UpdateDateTime,
                LastActivityUser = x.LastActivityUser,
                LastActivityDateTime = x.LastActivityDateTime,
                Version = x.Version
            };
    
            _asBaseNameEntity = x => new BaseNameEntity
            {
                
                Id = x.Id,
    			// +simple
    			Name = x.Name,
                
                IsVisible = x.IsVisible,
                InsertUser = x.InsertUser,
                InsertDateTime = x.InsertDateTime,
                UpdateUser = x.UpdateUser,
                UpdateDateTime = x.UpdateDateTime,
                LastActivityUser = x.LastActivityUser,
                LastActivityDateTime = x.LastActivityDateTime,
                Version = x.Version
                 
            };
    
            _toBaseNameEntityFunc = (y,x) => {
                
                y.Id = x.Id;
    			// +simple
    			y.Name = x.Name;
                
                y.IsVisible = x.IsVisible;
                y.InsertUser = x.InsertUser;
                y.InsertDateTime = x.InsertDateTime;
                y.UpdateUser = x.UpdateUser;
                y.UpdateDateTime = x.UpdateDateTime;
                y.LastActivityUser = x.LastActivityUser;
                y.LastActivityDateTime = x.LastActivityDateTime;
                // y.Version = x.Version;
          
    			return y;
            };
    
            OnSetConverters();
    
            _asBaseNameEntityFunc = _asBaseNameEntity.Compile();
            _asBaseNameEntityDtoFunc = _asBaseNameEntityDto.Compile();
        }
    
        static partial void OnSetConverters();
        static partial void OnSetOrderQuery(IQueryable<BaseNameEntity> query);
        static partial void OnSetOrderQuery(IQueryable<BaseNameEntityDto> query);
        static partial void OnSetSearchQuery(IQueryable<BaseNameEntity> query, string searchString);
        static partial void OnSetOrders();
        static partial void OnSetIncludeNavigations();
        static partial void OnSetFilters(string searchString);
    }
}
