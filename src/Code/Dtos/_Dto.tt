<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@ 
 output extension=".cs"#><#

const string inputFile = @"..\Model.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var moreNamespace = ""; // "Ark.ResultCheckers.Dtos";
var usinglist = new string[]{
					"Microsoft.EntityFrameworkCore",
					"Ark.ResultCheckers.Entities",
				};

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection)/*.Where(w => w.Name.Contains("Bulk") == false)*/)
{

    fileManager.StartNewFile(entity.Name + "Dto.cs");
    BeginNamespace(code, moreNamespace);

	var baseType = "";
	var entityBaseType = typeMapper.GetTypeName(entity.BaseType);

	
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#>
<#=codeStringGenerator.EntityClassOpening(entity, (entity.Name.EndsWith("Bulk") ? "" : baseType))#>
{
<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);
    var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entity);
    var complexProperties = typeMapper.GetComplexProperties(entity);
	var isBase = entity.Name.Contains("BaseEntity") 
					|| entity.Name.StartsWith("Base") 
					|| entity.Name.StartsWith("BaseName")
					|| entity.Name.StartsWith("BulkName")
					|| entity.Name.Contains("BulkEntity");


#>
    public <#=code.Escape(entity)#>Dto()
    {
<#
	if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any())
    {
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

	}
#>
		
        OnInitialize();
    }

    partial void OnInitialize();

<#

    var simpleProperties = typeMapper.GetSimpleProperties(entity);
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(entity, edmProperty)#>
<#
        }
    }

    if (complexProperties.Any())
    {
#>
	// +complex
<#
        foreach(var complexProperty in complexProperties)
        {
			var complexType = typeMapper.GetItemsToGenerate<ComplexType>(itemCollection).First( f => f.Name == complexProperty.TypeUsage.EdmType.Name);
#>
    <#=codeStringGenerator.ComplexProperty(complexType, complexProperty)#>
<#
        }
#>
	// -complex
<#
    }

    var navigationProperties = typeMapper.GetNavigationProperties(entity)
							.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
    if (navigationProperties.Any())
    {
#>
	// +navigation
<#

		foreach (var navigationProperty in navigationProperties)
        {
			var endEntityType = navigationProperty.ToEndMember.GetEntityType();
			var endEntityTypes = ToSentence(code.Escape(endEntityType),"|").Split('|');
			if(endEntityTypes.Length > 1)
			{
				//check if items are navigation in endEntityType
				bool isAllItemNavProperty = true;
				foreach(var item in endEntityTypes)
				{
					var endNavigationProperties = typeMapper.GetNavigationProperties(endEntityType).Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
					isAllItemNavProperty = endNavigationProperties.Any(np =>  typeMapper.GetTypeName(np.ToEndMember.GetEntityType()) == item);
					if(!isAllItemNavProperty)
						break;
				}

				if(isAllItemNavProperty)
				{
					foreach(var item in endEntityTypes.Where(w => simpleProperties.Any(a => !code.Escape(a).Contains(w))))
					{
						var itemEntityType = typeMapper.GetItemsToGenerate<EntityType>(itemCollection).FirstOrDefault(w => w.Name == item);
						if(itemEntityType != null)
						{
#>
/*
    <#=codeStringGenerator.ForeignProperty2(entity, navigationProperty, itemEntityType)#>
*/
<#
						}
					}
				}
			}
#>
    <#=codeStringGenerator.ForeignProperty2(entity, navigationProperty)#>
<#
		}
#>
	// -navigation
<#
    }


#>
	private static Expression<Func<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>Dto>> _as<#=code.Escape(entity)#>Dto;
    public static Expression<Func<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>Dto>> As<#=code.Escape(entity)#>Dto
    {
        get
        {
            SetConverters();
            return _as<#=code.Escape(entity)#>Dto;
        }
    }
    
    private static Func<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>Dto> _as<#=code.Escape(entity)#>DtoFunc;
    public static Func<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>Dto> As<#=code.Escape(entity)#>DtoFunc
    {
        get
        {
            SetConverters();
            return _as<#=code.Escape(entity)#>DtoFunc;
        }
    }
    
    private static Expression<Func<<#=code.Escape(entity)#>Dto, <#=code.Escape(entity)#>>> _as<#=code.Escape(entity)#>;
    public static Expression<Func<<#=code.Escape(entity)#>Dto, <#=code.Escape(entity)#>>> As<#=code.Escape(entity)#>
    {
        get
        {
            SetConverters();
            return _as<#=code.Escape(entity)#>;
        }
    }
    
    private static Func<<#=code.Escape(entity)#>Dto, <#=code.Escape(entity)#>> _as<#=code.Escape(entity)#>Func;
    public static Func<<#=code.Escape(entity)#>Dto, <#=code.Escape(entity)#>> As<#=code.Escape(entity)#>Func
    {
        get
        {
            SetConverters();
            return _as<#=code.Escape(entity)#>Func;
        }
    }

	private static Func<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>Dto, <#=code.Escape(entity)#>> _to<#=code.Escape(entity)#>Func;
    public static Func<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>Dto, <#=code.Escape(entity)#>> To<#=code.Escape(entity)#>Func
    {
        get
        {
            SetConverters();
            return _to<#=code.Escape(entity)#>Func;
        }
    }

	/*
	private static Expression<Func<<#=code.Escape(entity)#>, string>> _order<#=code.Escape(entity)#>;
    public static Expression<Func<<#=code.Escape(entity)#>, string>> Order<#=code.Escape(entity)#>
    {
        get
        {
            SetConverters();
            return _order<#=code.Escape(entity)#>;
        }
    }
	*/

	private static Expression<Func<<#=code.Escape(entity)#>, bool>> SearchExpression(string searchString)
    {
        return 
		<#
	if(entity.Name.StartsWith("Archive"))
	{
#>
		w => w.ArchiveId.ToString().Contains(searchString) 
<#
	}
	else
	{
#>
		w => w.Id.ToString().Contains(searchString) 
<#
	}
	if(entityBaseType?.StartsWith("BaseName") == true || entityBaseType?.StartsWith("BaseMessage") == true)
	{
#>
			|| w.Name.Contains(searchString) 
<#
	}
	else
	{
		if (simpleProperties.Any())
		{
			foreach (var edmProperty in simpleProperties.Where(w => (w.Name == "id") == false))//.Take(5))
			{
				var isForeignKey = IsPropertyForeignKey(entity, edmProperty);
				var type = typeMapper.GetTypeName(edmProperty.TypeUsage);

				if(isForeignKey == false)
				{
					if(type != null && (type == "string" /*|| type == "int"*/))
					{
#>
			|| w.<#= code.Escape(edmProperty) #>.Contains(searchString) //<#= code.Escape(type) #>
<#
					}
				}
				else
				{
					var navigationProperty = entity.NavigationProperties.FirstOrDefault(np=>np.GetDependentProperties().Contains(edmProperty));
					var navEntityType = navigationProperty.ToEndMember.GetEntityType();
					var navEdmProperty = typeMapper.GetSimpleProperties(navEntityType).FirstOrDefault(f => typeMapper.GetTypeName(f.TypeUsage) == "string");
					if(navEdmProperty == null)
					{
#>
				|| w.<#= code.Escape(navigationProperty) #>.Id.ToString().Contains(searchString) //<#= navEdmProperty != null ? code.Escape(navEdmProperty) : "null" #>
<#
					}
					else
					{
#>
				|| w.<#= code.Escape(navigationProperty) #>.<#= code.Escape(navEdmProperty) #>.Contains(searchString) //<#= navEdmProperty != null ? code.Escape(navEdmProperty) : "null" #>
<#
					}
				}
			}
		}
	}
#>
			;
    }

<#
	if(!isBase)
	{
#>
    static IQueryable<<#=code.Escape(entity)#>> _searchQuery;
    public static IQueryable<<#=code.Escape(entity)#>> Search(IQueryable<<#=code.Escape(entity)#>> query, string searchString)
    {
        _searchQuery = query.Where(
						SearchExpression(searchString)
					);
		OnSetSearchQuery(query, searchString);
		return _searchQuery;
	}

<#
			}
#>
    static IOrderedQueryable<<#=code.Escape(entity)#>> _orderQuery;
    public static IOrderedQueryable<<#=code.Escape(entity)#>> OrderBy(IQueryable<<#=code.Escape(entity)#>> query)
    {
<#
	if(entity.Name.StartsWith("Archive"))
	{
#>
		_orderQuery = query.OrderBy(o => <#= entityBaseType?.StartsWith("BaseName") == true || entityBaseType?.StartsWith("BaseMessage") == true ? "o.Name" : "o.ArchiveId" #>);
<#
	}
	else
	{
#>
		_orderQuery = query.OrderBy(o => <#= entityBaseType?.StartsWith("BaseName") == true || entityBaseType?.StartsWith("BaseMessage") == true ? "o.Name" : "o.Id" #>);
<#
	}
#>
		OnSetOrderQuery(query);
        return _orderQuery;
    }

    static IOrderedQueryable<<#=code.Escape(entity)#>Dto> _orderQueryDto;
    public static IOrderedQueryable<<#=code.Escape(entity)#>Dto> OrderBy(IQueryable<<#=code.Escape(entity)#>Dto> query)
    {
<#
	if(entity.Name.StartsWith("Archive"))
	{
#>
		_orderQueryDto = query.OrderBy(o => <#= entityBaseType?.StartsWith("BaseName") == true || entityBaseType?.StartsWith("BaseMessage") == true ? "o.Name" : "o.ArchiveId" #>);
<#
	}
	else
	{
#>
		_orderQueryDto = query.OrderBy(o => <#= entityBaseType?.StartsWith("BaseName") == true || entityBaseType?.StartsWith("BaseMessage") == true ? "o.Name" : "o.Id" #>);
<#
	}
#>
        OnSetOrderQuery(query);
        return _orderQueryDto;
    }

<#
	if(isBase == false)
	{
#>
	static string[] _includeNavigations;
    public static string[] IncludeNavigations()
    {
        _includeNavigations = new string[] { 
<#
	navigationProperties = typeMapper.GetNavigationProperties(entity)
							.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
    if (navigationProperties.Any())
    {
#>
		// +navigation
<#
		foreach (var navigationProperty in navigationProperties)
        {
			var endEntityType = navigationProperty.ToEndMember.GetEntityType();
#>
			"<#= code.Escape(navigationProperty) #>",
<#
		}
    }
#>
		};
        OnSetIncludeNavigations();
        return _includeNavigations;
    }

    static Expression<Func<<#=code.Escape(entity)#>, bool>>[] _filters;
    public static Expression<Func<<#=code.Escape(entity)#>, bool>>[] Filters(string searchString)
    {
        _filters = new Expression<Func<<#=code.Escape(entity)#>, bool>>[]
					   {
							SearchExpression(searchString)

					   };
        OnSetFilters(searchString);
        return _filters;
    }

<#
	}
#>

	private static void SetConverters()
    {
        _as<#=code.Escape(entity)#>Dto = x => new <#=code.Escape(entity)#>Dto
        {
<#
	if(entityBaseType != null)
	{
#>            
            Id = x.Id,
<#
	}
	if(entityBaseType?.StartsWith("BaseName") == true || entityBaseType?.StartsWith("BaseMessage") == true)
	{
#>            
            Name = x.Name,
            // DisplayName = x.DisplayName,
            // Description = x.Description,
<#
	}
	if(entityBaseType?.StartsWith("Bulk") == true)
	{
#>            
            // UserName = x.UserName,
<#
	}

	if (simpleProperties.Any())
    {
#>
			// +simplex
<#
        foreach (var edmProperty in simpleProperties)
        {
#>
			<#=code.Escape(edmProperty)#> = x.<#=code.Escape(edmProperty)#>,
<#
        }
    }

	if (complexProperties.Any())
    {
#>
			// +complex
<#
        foreach(var complexProperty in complexProperties)
        {
			var complexType = typeMapper.GetItemsToGenerate<ComplexType>(itemCollection).First( f => f.Name == complexProperty.TypeUsage.EdmType.Name);
#>
			<#=codeStringGenerator.ComplexPropertyAsDto(complexType, complexProperty)#>
<#
        }
    }

	navigationProperties = typeMapper.GetNavigationProperties(entity)
							.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
    if (navigationProperties.Any())
    {
#>
			// +navigation
<#

		foreach (var navigationProperty in navigationProperties)
        {
			var endEntityType = navigationProperty.ToEndMember.GetEntityType();
			var endEntityTypes = ToSentence(code.Escape(endEntityType),"|").Split('|');
			if(endEntityTypes.Length > 1)
			{
				//check if items are navigation in endEntityType
				bool isAllItemNavProperty = true;
				foreach(var item in endEntityTypes)
				{
					var endNavigationProperties = typeMapper.GetNavigationProperties(endEntityType).Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
					isAllItemNavProperty = endNavigationProperties.Any(np =>  typeMapper.GetTypeName(np.ToEndMember.GetEntityType()) == item);
					if(!isAllItemNavProperty)
						break;
				}

				if(isAllItemNavProperty)
				{
					foreach(var item in endEntityTypes.Where(w => simpleProperties.Any(a => !code.Escape(a).Contains(w))))
					{
						var itemEntityType = typeMapper.GetItemsToGenerate<EntityType>(itemCollection).FirstOrDefault(w => w.Name == item);
						if(itemEntityType != null)
						{
#>
/*
			<#=codeStringGenerator.ForeignPropertyAsDto2(entity, navigationProperty, itemEntityType)#>
*/
<#
						}
					}
				}
			}
#>
			<#=codeStringGenerator.ForeignPropertyAsDto2(entity, navigationProperty)#>
<#
		}
    }

	if(entityBaseType?.StartsWith("Bulk") == false)
	{
#>            
            IsVisible = x.IsVisible,
            InsertUser = x.InsertUser,
            InsertDateTime = x.InsertDateTime,
            UpdateUser = x.UpdateUser,
            UpdateDateTime = x.UpdateDateTime,
            LastActivityUser = x.LastActivityUser,
            LastActivityDateTime = x.LastActivityDateTime,
            Version = x.Version
<#
	}
#>
        };

        _as<#=code.Escape(entity)#> = x => new <#=code.Escape(entity)#>
        {
<#
	if(entityBaseType != null)
	{
#>            
            Id = x.Id,
<#
	}
	if(entityBaseType?.StartsWith("BaseName") == true || entityBaseType?.StartsWith("BaseMessage") == true)
	{
#>            
            Name = x.Name,
            // DisplayName = x.DisplayName,
            // Description = x.Description,
<#
	}
	if(entityBaseType?.StartsWith("Bulk") == true)
	{
#>            
            // UserName = x.UserName,
<#
	}

	if (simpleProperties.Any())
    {
#>
			// +simple
<#
        foreach (var edmProperty in simpleProperties)
        {
#>
			<#=code.Escape(edmProperty)#> = x.<#=code.Escape(edmProperty)#>,
<#
        }
    }

	if (complexProperties.Any())
    {
#>
			// +complex
<#
        foreach(var complexProperty in complexProperties)
        {
			var complexType = typeMapper.GetItemsToGenerate<ComplexType>(itemCollection).First( f => f.Name == complexProperty.TypeUsage.EdmType.Name);
#>
			<#=codeStringGenerator.ComplexPropertyAsEntity(complexType, complexProperty)#>
<#
        }
    }

	if (navigationProperties.Any())
    {
#>
			// +navigation
<#
        foreach (var navigationProperty in navigationProperties)
        {
#>
<#
        }
    }

	if(entityBaseType?.StartsWith("Bulk") == false)
	{
#>            
            IsVisible = x.IsVisible,
            InsertUser = x.InsertUser,
            InsertDateTime = x.InsertDateTime,
            UpdateUser = x.UpdateUser,
            UpdateDateTime = x.UpdateDateTime,
            LastActivityUser = x.LastActivityUser,
            LastActivityDateTime = x.LastActivityDateTime,
            Version = x.Version
<#
	}
#>             
        };

        _to<#=code.Escape(entity)#>Func = (y,x) => {
<#
	if(entityBaseType != null)
	{
#>            
            y.Id = x.Id;
<#
	}
	if(entityBaseType?.StartsWith("BaseName") == true || entityBaseType?.StartsWith("BaseMessage") == true)
	{
#>            
            y.Name = x.Name;
            // y.DisplayName = x.DisplayName;
<#
	}
	if(entityBaseType?.StartsWith("Bulk") == true)
	{
#>            
            // y.UserName = x.UserName;
<#
	}

	if (simpleProperties.Any())
    {
#>
			// +simple
<#
        foreach (var edmProperty in simpleProperties)
        {
#>
			y.<#=code.Escape(edmProperty)#> = x.<#=code.Escape(edmProperty)#>;
<#
        }
    }

	if (complexProperties.Any())
    {
#>
			// +complex
<#
        foreach(var complexProperty in complexProperties)
        {
			var complexType = typeMapper.GetItemsToGenerate<ComplexType>(itemCollection).First( f => f.Name == complexProperty.TypeUsage.EdmType.Name);
#>
			<#=codeStringGenerator.ComplexPropertyToEntity(complexType, complexProperty)#>
<#
        }
    }

	navigationProperties = typeMapper.GetNavigationProperties(entity)
							.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
    if (navigationProperties.Any())
    {
#>
			// +navigation
<#

		foreach (var navigationProperty in navigationProperties)
        {
			var endEntityType = navigationProperty.ToEndMember.GetEntityType();
			var endEntityTypes = ToSentence(code.Escape(endEntityType),"|").Split('|');
			if(endEntityTypes.Length > 1)
			{
				//check if items are navigation in endEntityType
				bool isAllItemNavProperty = true;
				foreach(var item in endEntityTypes)
				{
					var endNavigationProperties = typeMapper.GetNavigationProperties(endEntityType).Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
					isAllItemNavProperty = endNavigationProperties.Any(np =>  typeMapper.GetTypeName(np.ToEndMember.GetEntityType()) == item);
					if(!isAllItemNavProperty)
						break;
				}

				if(isAllItemNavProperty)
				{
					foreach(var item in endEntityTypes.Where(w => simpleProperties.Any(a => !code.Escape(a).Contains(w))))
					{
						var itemEntityType = typeMapper.GetItemsToGenerate<EntityType>(itemCollection).FirstOrDefault(w => w.Name == item);
						if(itemEntityType != null)
						{
#>
			/* <#=codeStringGenerator.ForeignPropertyToEntity(entity, navigationProperty, itemEntityType)#> */
<#
						}
					}
				}
			}
#>
			/* <#=codeStringGenerator.ForeignPropertyToEntity(entity, navigationProperty)#> */
<#
		}
    }

	if(entityBaseType?.StartsWith("Bulk") == false)
	{
#>            
            y.IsVisible = x.IsVisible;
            y.InsertUser = x.InsertUser;
            y.InsertDateTime = x.InsertDateTime;
            y.UpdateUser = x.UpdateUser;
            y.UpdateDateTime = x.UpdateDateTime;
            y.LastActivityUser = x.LastActivityUser;
            y.LastActivityDateTime = x.LastActivityDateTime;
            // y.Version = x.Version;
<#
	}
#>      
			return y;
        };

        OnSetConverters();

        _as<#=code.Escape(entity)#>Func = _as<#=code.Escape(entity)#>.Compile();
        _as<#=code.Escape(entity)#>DtoFunc = _as<#=code.Escape(entity)#>Dto.Compile();
    }

    static partial void OnSetConverters();
    static partial void OnSetOrderQuery(IQueryable<<#=code.Escape(entity)#>> query);
    static partial void OnSetOrderQuery(IQueryable<<#=code.Escape(entity)#>Dto> query);
    static partial void OnSetSearchQuery(IQueryable<<#=code.Escape(entity)#>> query, string searchString);
    static partial void OnSetOrders();
    static partial void OnSetIncludeNavigations();
    static partial void OnSetFilters(string searchString);
}
<#
    EndNamespace(code);
}

foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
{
	break;

    fileManager.StartNewFile(complex.Name + "Dto.cs");
	BeginNamespace(code, moreNamespace);
    //BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
[ComplexType]
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>Dto
{
<#
    var complexProperties = typeMapper.GetComplexProperties(complex);
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any())
    {
        foreach(var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(complex, edmProperty)#>
<#
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties)
        {
#>
    <#=codeStringGenerator.Property(complex, edmProperty)#>
<#
        }
    }
#>
}
<#
    EndNamespace(code);
}

foreach (var enumType in typeMapper.GetEnumItemsToGenerate(itemCollection))
{
	break;

    fileManager.StartNewFile(enumType.Name + "Dto.cs");
	BeginNamespace(code, moreNamespace);
    //BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
[Flags]
<#
    }
#>
<#=codeStringGenerator.EnumOpening(enumType)#>
{
<#
    var foundOne = false;
    
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
        foundOne = true;
#>
    <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#
    }

    if (foundOne)
    {
        this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    }
#>
}
<#
    EndNamespace(code);
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public static bool IsPropertyKey(EntityType entity, EdmProperty edmProperty)
{
	return entity.KeyMembers.Any(k => k.Name == edmProperty.Name);
}

public static bool IsPropertyForeignKey(EntityType entity, EdmProperty edmProperty)
{
	return entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
}

public static string ToSentence(string s, string fill=" ")
{
	if (string.IsNullOrWhiteSpace(s))
		return s;

	string r = string.Empty;
	//int c = 0;
	for (int i = 0; i < s.Count(); i++)
	{
		var q = s[i];
		if (char.IsUpper(q) && i > 0 && char.IsLower(s[(i-1)]))
		{
			r = string.Format("{0}{1}{2}", r, fill, q);
			//c++;
		}
		else
		{
			r = string.Format("{0}{1}", r, q);
		}
	}

	//
	for (int i = 0; i < r.Count(); i++)
	{
		var q = r[i];
		if (char.IsLower(q))
		{
			if(i > 1){
				var j = i-1;
				r = string.Format("{0}{1}{2}", r.Substring(0,j), fill, r.Substring(j));		
			}
			break;
		}
	}

	return r;
}

public static string ToPlural(string word)
{
    string s = null;
    var len = word.Length;
    var w = word.ToLower();
    if (System.String.Compare(w, "person", System.StringComparison.Ordinal) == 0)
    {
        s = word.Substring(0, 1) + "eople";
        return s;
    }
	if (w.EndsWith("curriculum")) { return word.Substring(0, (len - 2)) + "a"; } if (w.EndsWith("staff"))
    {
        return word + "s";
    }
    if (System.String.Compare(w, "staff", System.StringComparison.Ordinal) == 0)
    {
        return word + "s";
    }

    var l = w.Last();
    switch (l)
    {
        case 'f': s = word.Substring(0, (len - 1)) + "ves"; break;
        case 'h': 
        case 'o': 
        case 's': 
        case 'x': s = word + "es"; break;
        case 'y': s = word.Substring(0, (len - 1)) + "ies"; break;
        default:
            s = word + "s"; break;
    }
    return s;
}

public static string ToCamelCase(string s)
{
	if (string.IsNullOrWhiteSpace(s))
		return s;
	// CGPAText, GodExcellent
	var j = 0;
	for (int i = 0; i < s.Count(); i++)
	{
		var q = s[i];
		if (char.IsLower(q))
		{
			j = i;
			if(i > 1)
				j = i-1;
			
			break;
		}
	}

	var	l = s.Substring(0,j);
	var r = s.Substring(j);
	return l.ToLower() + r;

}

public static string ToDisplayName(string propertyName)
{
	var name = propertyName;
    if (propertyName.EndsWith("Id"))
    {
        name = propertyName.Remove(propertyName.Length - 2);
    };

	return ToSentence(name);
}

public static int IndexOfNth(string str, string value, int nth = 0)
{
    if (nth < 0)
        throw new ArgumentException("Can not find a negative index of substring in string. Must start with 0");

    int offset = str.IndexOf(value);
    for (int i = 0; i < nth; i++)
    {
        if (offset == -1) return -1;
        offset = str.IndexOf(value, offset + 1);
    }

    return offset;
}

public static string GetAttributeValue(Facet attrib)
{
	var aVal=attrib.Value;
	return Convert.ToString(aVal);
}

public static string MaxLengthValue(EdmProperty prop)
{
	var attrib=prop.TypeUsage.Facets.FirstOrDefault(p=>p.Name=="MaxLength");
	if (attrib != null)
	{
		string aVal= GetAttributeValue(attrib);
		if (aVal == "Max" || aVal=="" || prop.TypeUsage.EdmType.Name == "Binary")
			return null;
		else
		{
			return aVal;
		}
	}
	else
	{
		return null;
	}
}

        
public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void BeginNamespace(CodeGenerationTools code, string moreNamespace)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(moreNamespace))
    {
		codeNamespace = moreNamespace;
	}

    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#= codeNamespace #>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}

public const string TemplateId = "CSharp_DbContext_Types_EF5";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

	public string GetNamespace()
	{
		var codeNamespace = _code.VsNamespaceSuggestion();
		if (!String.IsNullOrEmpty(codeNamespace))
		{
			return _code.EscapeNamespace(codeNamespace);

		}
		return null;
	}

	public string GetRootNamespace()
	{
		var ns = GetNamespace();
		if (!String.IsNullOrEmpty(ns))
		{
            var i = IndexOfNth(ns, ".", 1);
            return ns.Substring(0, i);
		}
		return null;
	}

	public string GetEntityBaseType(EntityType entity, string baseType)
	{
		return _typeMapper.GetTypeName(entity.BaseType) != null ?  _typeMapper.GetTypeName(entity.BaseType) + "Dto" : baseType;
	}

    public string Property(EdmProperty edmProperty)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
    }

	public string Property(EdmProperty edmProperty, string prefix)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {5}{2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)),
			prefix
			);
    }
	public string Property(EntityType entity, EdmProperty edmProperty)
	{
		return string.Format(
            CultureInfo.InvariantCulture,
            "{0}{1}",
			PropertyAnnotation(entity, edmProperty),
			Property(edmProperty)
			);
	}
     
	public string Property(ComplexType complex, EdmProperty edmProperty)
	{
		return string.Format(
            CultureInfo.InvariantCulture,
            "{0}{1}",
			PropertyAnnotation(complex, edmProperty),
			Property(edmProperty)
			);
	}   

	public string PropertyAnnotation(EntityType entity, EdmProperty edmProperty)
    {
		var result = String.Empty;
		var isKey = IsPropertyKey(entity, edmProperty);
		var isForeignKey = IsPropertyForeignKey(entity, edmProperty);
		var type = _typeMapper.GetTypeName(edmProperty.TypeUsage);
		if(isKey)
		{
			var count=	entity.KeyMembers.Count;
			var index =	entity.KeyMembers.IndexOf(edmProperty);
			result = string.Format(
				CultureInfo.InvariantCulture,
				"[Key{0}{1}]", 
				count > 1 ? (", Column(Order = " + index + ")") : null,
				//count == 1 && (edmProperty.Name != "PersonId") && (edmProperty.Name != "Id") && (type == "byte" || type == "int" || type == "short") ? _code.StringBefore(", ", "DatabaseGenerated(DatabaseGeneratedOption.None)") : ""
				count == 1 && (type == "byte" || type == "short") ? _code.StringBefore(", ", "DatabaseGenerated(DatabaseGeneratedOption.Identity)") : ""
				);
		}

		if(isForeignKey)
		{
			var p = entity.NavigationProperties.FirstOrDefault(np=>np.GetDependentProperties().Contains(edmProperty));
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[ForeignKey(\"{1}\")]", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				_code.Escape(p)
				);
		}

		if(!edmProperty.Nullable && !(type=="byte" || type=="int" || type=="long" || type=="bool" || type=="float" || type=="double" || type=="decimal"))
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[Required(ErrorMessage = \"The {1} is a mandatory Field.\")]", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				ToSentence(_code.Escape(edmProperty))
				);
		}
		

		if(MaxLengthValue(edmProperty) != null)
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[MaxLength({1}), StringLength({1}, ErrorMessage = \"The {2} value cannot exceed {1} characters.\")]",
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				MaxLengthValue(edmProperty),
				ToSentence(_code.Escape(edmProperty))
				);
		}

		if(edmProperty.Name.Contains("Email"))
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[EmailAddress][DataType(DataType.EmailAddress)]",
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				MaxLengthValue(edmProperty),
				ToSentence(_code.Escape(edmProperty))
				);
		}
		
        //[DisplayFormat(DataFormatString = "{0:dd-MMM-yyyy hh:mm:ss}")]

		if(type=="DateTime" || type=="System.DateTime" || type=="Nullable<System.DateTime>")
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
        
				"{0}[DataType(DataType.Date)]{1}[DisplayFormat(DataFormatString = \"{{0:yyyy-MM-dd}}\", ApplyFormatInEditMode = true)]", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				Environment.NewLine + "\t",
				ToSentence(_code.Escape(edmProperty))
				);
		}

		if(type=="decimal" || type=="Nullable<decimal>")
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[DisplayFormat(DataFormatString = \"{{0:#,#0.00}}\", ApplyFormatInEditMode = true)]", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				ToSentence(_code.Escape(edmProperty))
				);
		}

		result = string.Format(
			CultureInfo.InvariantCulture,
			"{0}[Display(Name = \"{1}\")]", 
			string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
			isKey && !isForeignKey ? ToSentence(_code.Escape(edmProperty)) : ToDisplayName(_code.Escape(edmProperty))
			);
		
		
		result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t"
				);

		return result;
    }

	public string PropertyAnnotation(ComplexType complex, EdmProperty edmProperty, string displayNamePrefix = null)
    {
		var result = String.Empty;
		
		if(!edmProperty.Nullable)
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[Required(ErrorMessage = \"The {1} is a mandatory Field.\")]", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				ToSentence(_code.Escape(edmProperty))
				);
		}

		if(MaxLengthValue(edmProperty) != null)
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[MaxLength({1}), StringLength({1}, ErrorMessage = \"The {2} value cannot exceed {1} characters.\")]",
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				MaxLengthValue(edmProperty),
				ToSentence(_code.Escape(edmProperty))
				);
		}
		
		if(displayNamePrefix == null)
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[Display(Name = \"{1}\")]", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				ToDisplayName(_code.Escape(edmProperty))				
				);

		}
		else{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}[Display(Name = \"{2} {1}\")]", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t",
				ToDisplayName(_code.Escape(edmProperty))
				, ToDisplayName(displayNamePrefix)
				);
		}
		
		result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t"
				);

		return result;
    }

	public string NavigationProperty(NavigationProperty navigationProperty)
    {
        var endType = _typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForProperty(navigationProperty)),
            navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navigationProperty),
            _code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
    }
    
	public string NavigationProperty(EntityType entity, NavigationProperty navigationProperty)
	{
		return string.Format(
            CultureInfo.InvariantCulture,
            "{0}{1}",
			NavigationPropertyAnnotation(entity, navigationProperty),
			NavigationProperty(navigationProperty)
			);
	}

    public string NavigationPropertyAnnotation(EntityType entity, NavigationProperty navigationProperty)
    {
		var result = String.Empty;
        var navigationProperties = _typeMapper.GetNavigationProperties(entity);
		var endType = navigationProperty.ToEndMember.GetEntityType();
		if(navigationProperties.Count(np=>np.ToEndMember.GetEntityType() == endType) > 1 /*&& navigationProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many*/)
		{
			result = string.Format(
				CultureInfo.InvariantCulture,
				"[InverseProperty(\"{0}\")]", 
				_code.Escape(_ef.Inverse(navigationProperty))
				);
		}

		result = string.Format(
				CultureInfo.InvariantCulture,
				"{0}", 
				string.IsNullOrEmpty(result) ? "" : result + Environment.NewLine + "\t"
				);

		return result;
	}

	public string ForeignProperty2(EntityType entity, NavigationProperty navigationProperty, EntityType endEntityType = null)
	{
		var result = String.Empty;

		var navEntityType = endEntityType != null ? endEntityType : navigationProperty.ToEndMember.GetEntityType();

		var isNameObject = _typeMapper.GetTypeName(navEntityType.BaseType).StartsWith("BaseName");
		var propertySuffix = isNameObject ? "Name" : String.Empty;
		var navPropertyName = endEntityType != null ? _code.Escape(navigationProperty) + _code.Escape(navEntityType) + propertySuffix : _code.Escape(navigationProperty) + propertySuffix;
		var navPropertyId = endEntityType != null ? _code.Escape(navEntityType) + "Id" : "";
		var navPropertyIdType = "int";
		if(endEntityType != null)
		{
			if(endEntityType.BaseType.Name.Contains("Short"))
				navPropertyIdType = "short";
			if(endEntityType.BaseType.Name.Contains("Long"))
				navPropertyIdType = "long";
			if(endEntityType.BaseType.Name.Contains("Byte"))
				navPropertyIdType = "byte";

		}
		
		if(!isNameObject)
		{
			var simpleProperties = _typeMapper.GetSimpleProperties(navEntityType);
			var edmProperty = simpleProperties.FirstOrDefault(f => _typeMapper.GetTypeName(f.TypeUsage) ==  "string");
			propertySuffix = edmProperty != null ? _code.Escape(edmProperty) : String.Empty;

			if(endEntityType != null)
			{
				navPropertyName = _code.Escape(navigationProperty) + _code.Escape(navEntityType) + propertySuffix;
			}
			else
			{
				// navPropertyName = _code.Escape(navigationProperty) == _code.Escape(navEntityType) ? propertySuffix : _code.Escape(navigationProperty) + propertySuffix;
				navPropertyName = _code.Escape(navigationProperty) + propertySuffix;
			}
		}


		if(!string.IsNullOrEmpty(propertySuffix))
		{
			var property = string.Format(
							CultureInfo.InvariantCulture,
							"{0} {1} {2} {{ get; set; }}",
							"public",// : Accessibility.ForProperty(edmProperty),
							"string", //: _typeMapper.GetTypeName(edmProperty.TypeUsage),
							navPropertyName
							);

			var propertyAnnotation = string.Format(
										CultureInfo.InvariantCulture,
										"[Display(Name = \"{0}\")]", 
										ToSentence(navPropertyName)
										);

			result = string.Format(
						CultureInfo.InvariantCulture,
						"// +{0}{1}\t",
						_code.Escape(navigationProperty),
						Environment.NewLine
						);

			result += string.Format(
						CultureInfo.InvariantCulture,
						"{0}{1}",
						propertyAnnotation + Environment.NewLine + "\t",
						property
						);

			if(endEntityType != null)
			{
				result += Environment.NewLine + "\t";

				property = string.Format(
							CultureInfo.InvariantCulture,
							"{0} {1}? {2} {{ get; set; }}",
							"public",// : Accessibility.ForProperty(edmProperty),
							navPropertyIdType, //: _typeMapper.GetTypeName(edmProperty.TypeUsage),
							navPropertyId
							);

				propertyAnnotation = string.Format(
										CultureInfo.InvariantCulture,
										"[Display(Name = \"{0}\")]", 
										ToSentence(navPropertyId)
										);

				result += string.Format(
							CultureInfo.InvariantCulture,
							"{0}{1}",
							propertyAnnotation + Environment.NewLine + "\t",
							property
							);

			}
		}

		// basic
		if(!isNameObject)
		{
			result += Environment.NewLine + "\t";

			var property = string.Format(
						CultureInfo.InvariantCulture,
						"{0} {1} {2} {{ get; set; }}",
						"public",// : Accessibility.ForProperty(edmProperty),
						"string", //: _typeMapper.GetTypeName(edmProperty.TypeUsage),
						_code.Escape(navigationProperty) + "Name"
						);

			var propertyAnnotation = string.Format(
									CultureInfo.InvariantCulture,
									"[Display(Name = \"{0}\")]", 
									ToSentence(_code.Escape(navigationProperty) + "Name")
									);

			result += string.Format(
						CultureInfo.InvariantCulture,
						"{0}{1} //Basic-Nav-Property",
						propertyAnnotation + Environment.NewLine + "\t",
						property
						);

		}

		result += string.Format(
			CultureInfo.InvariantCulture,
			"{1}\t// -{0}",
			_code.Escape(navigationProperty),
			Environment.NewLine
			);

		return result;
	}

	public string ForeignProperty(EntityType entity, NavigationProperty navigationProperty)
	{
		var result = String.Empty;
		var isNameObject = false;

		var endEntityType = navigationProperty.ToEndMember.GetEntityType();
		var endEntityTypes = ToSentence(_code.Escape(endEntityType),"|").Split('|');

		var entityBaseType = _typeMapper.GetTypeName(endEntityType.BaseType);
		var simpleProperties = _typeMapper.GetSimpleProperties(endEntityType);
		if(entityBaseType.StartsWith("BaseName"))
		{
			//simpleProperties = _typeMapper.GetSimpleProperties(endEntityType.BaseType);
			isNameObject = true;

		}
		var edmProperty = simpleProperties.FirstOrDefault(f => _typeMapper.GetTypeName(f.TypeUsage) ==  "string");
		
		
		if(edmProperty != null || isNameObject)
		{
			var propName = isNameObject ? (_code.Escape(navigationProperty) + "Name") : (_code.Escape(edmProperty).StartsWith(_code.Escape(navigationProperty)) || endEntityTypes.Length > 1 ?   _code.Escape(edmProperty) : (_code.Escape(navigationProperty) + _code.Escape(edmProperty)));
			var property = string.Format(
							CultureInfo.InvariantCulture,
							"{0} {1} {2} {{ {3}get; {4}set; }}",
							isNameObject ? "public" : Accessibility.ForProperty(edmProperty),
							isNameObject ? "string" : _typeMapper.GetTypeName(edmProperty.TypeUsage),
							propName,
							_code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
							_code.SpaceAfter(Accessibility.ForSetter(edmProperty)));

			var propertyAnnotation = string.Format(
										CultureInfo.InvariantCulture,
										"[Display(Name = \"{0}\")]", 
										ToSentence(propName)
										);

			result = string.Format(
						CultureInfo.InvariantCulture,
						"{0}{1}",
						propertyAnnotation + Environment.NewLine + "\t",
						property
						);
		}
		

		return result;
	}

	public string ForeignNavigationProperty(EntityType endEntityType, EntityType entity, NavigationProperty navigationProperty)
	{
		var result = String.Empty;
		var isNameObject = false;

		var npEndEntityType = navigationProperty.ToEndMember.GetEntityType();

		//
		var endEntityTypes = ToSentence(_code.Escape(endEntityType),"|").Split('|');

		var entityBaseType = _typeMapper.GetTypeName(endEntityType.BaseType);
		var simpleProperties = _typeMapper.GetSimpleProperties(endEntityType);
		if(entityBaseType.StartsWith("BaseName"))
		{
			//simpleProperties = _typeMapper.GetSimpleProperties(endEntityType.BaseType);
			isNameObject = true;

		}
		var edmProperty = simpleProperties.FirstOrDefault(f => _typeMapper.GetTypeName(f.TypeUsage) ==  "string");
		
		if(_typeMapper.GetSimpleProperties(entity).Any(a => _code.Escape(a) == _code.Escape(edmProperty)))
		{
			edmProperty = null;
		}
		var navigationProperties = _typeMapper.GetNavigationProperties(npEndEntityType)
							.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
		if(!navigationProperties.Any(a => _code.Escape(a) == _code.Escape(endEntityType)))
		{
			isNameObject = false;
			edmProperty = null;
		}
		navigationProperties = _typeMapper.GetNavigationProperties(entity)
							.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
		if(navigationProperties.Any(a => _code.Escape(a) == _code.Escape(endEntityType)) 
		)
		{
			isNameObject = false;
			edmProperty = null;
		}
		
		
		if(edmProperty != null || isNameObject)
		{
			var propName = isNameObject ? (_code.Escape(endEntityType) + "Name") : (_code.Escape(edmProperty).StartsWith(_code.Escape(endEntityType)) || endEntityTypes.Length > 1 ?   _code.Escape(edmProperty) : (_code.Escape(endEntityType) + _code.Escape(edmProperty)));
			var property = string.Format(
							CultureInfo.InvariantCulture,
							"{0} {1} {2} {{ {3}get; {4}set; }}",
							isNameObject ? "public" : Accessibility.ForProperty(edmProperty),
							isNameObject ? "string" : _typeMapper.GetTypeName(edmProperty.TypeUsage),
							propName,
							_code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
							_code.SpaceAfter(Accessibility.ForSetter(edmProperty)));

			var propertyAnnotation = string.Format(
										CultureInfo.InvariantCulture,
										"[Display(Name = \"{0}\")]", 
										ToSentence(propName) 
										);

			result = string.Format(
						CultureInfo.InvariantCulture,
						"{0}{1}",
						propertyAnnotation + Environment.NewLine + "\t",
						property
						);
		}
		

		return result;
	}

	public string ForeignPropertyAsDto2(EntityType entity, NavigationProperty navigationProperty, EntityType endEntityType = null)
	{
		var result = String.Empty;

		var navEntityType = endEntityType != null ? endEntityType : navigationProperty.ToEndMember.GetEntityType();

		var isNameObject = _typeMapper.GetTypeName(navEntityType.BaseType).StartsWith("BaseName");
		var propertySuffix = isNameObject ? "Name" : String.Empty;
		var navPropertyName = endEntityType != null ? _code.Escape(navigationProperty) + _code.Escape(navEntityType) + propertySuffix : _code.Escape(navigationProperty) + propertySuffix;
		var navPropertyId = endEntityType != null ? _code.Escape(navEntityType) + "Id" : "";
		var navPropertyIdType = "int";
		if(endEntityType != null)
		{
			if(endEntityType.BaseType.Name.Contains("Short"))
				navPropertyIdType = "short";
			if(endEntityType.BaseType.Name.Contains("Long"))
				navPropertyIdType = "long";
			if(endEntityType.BaseType.Name.Contains("Byte"))
				navPropertyIdType = "byte";

		}
		
		if(!isNameObject)
		{
			var simpleProperties = _typeMapper.GetSimpleProperties(navEntityType);
			var edmProperty = simpleProperties.FirstOrDefault(f => _typeMapper.GetTypeName(f.TypeUsage) ==  "string");
			propertySuffix = edmProperty != null ? _code.Escape(edmProperty) : String.Empty;

			if(endEntityType != null)
			{
				navPropertyName = _code.Escape(navigationProperty) + _code.Escape(navEntityType) + propertySuffix;
			}
			else
			{
				// navPropertyName = _code.Escape(navigationProperty) == _code.Escape(navEntityType) ? propertySuffix : _code.Escape(navigationProperty) + propertySuffix;
				navPropertyName = _code.Escape(navigationProperty) + propertySuffix;
			}
		}

		if(!string.IsNullOrEmpty(propertySuffix))
		{
			if(endEntityType == null)
			{
				result = string.Format(
							CultureInfo.InvariantCulture,
							"{0} = x.{1} != null ? x.{1}.{2} : default,",
							navPropertyName,
							_code.Escape(navigationProperty),
							propertySuffix
							);
			}
			else
			{
				result = string.Format(
							CultureInfo.InvariantCulture,
							"{0} = x.{1} != null ? (x.{1}.{2} != null ? x.{1}.{2}.{3} : null) : default,",
							navPropertyName,
							_code.Escape(navigationProperty),
							_code.Escape(navEntityType),
							propertySuffix
							);

				result += Environment.NewLine + "\t\t\t";

				result += string.Format(
							CultureInfo.InvariantCulture,
							"{0} = x.{1} != null ? (x.{1}.{2} != null ? x.{1}.{2}.{3} : default({4}?)) : default,",
							navPropertyId,
							_code.Escape(navigationProperty),
							_code.Escape(navEntityType),
							"Id",
							navPropertyIdType
							);


			}
		}

		if(!isNameObject)
		{
			result = string.Format(
						CultureInfo.InvariantCulture,
						"{0}Name = x.{1} == null ? default : x.{1}.{1}Name,",
						_code.Escape(navigationProperty),
						_code.Escape(navEntityType)
						);
		}

		return result;
	}

	public string ForeignPropertyAsDto(EntityType entity, NavigationProperty navigationProperty)
	{
		var result = String.Empty;

		var isNameObject = false;

		var endEntityType = navigationProperty.ToEndMember.GetEntityType();
		var endEntityTypes = ToSentence(_code.Escape(endEntityType),"|").Split('|');
		var entityBaseType = _typeMapper.GetTypeName(endEntityType.BaseType);
		var simpleProperties = _typeMapper.GetSimpleProperties(endEntityType);
		if(entityBaseType.StartsWith("BaseName"))
		{
			//simpleProperties = _typeMapper.GetSimpleProperties(endEntityType.BaseType);
			isNameObject = true;

		}
		var field = /*_typeMapper.GetTypeName(endEntityType) +*/ "Name";
		//var edmProperty = simpleProperties.FirstOrDefault(f => f.Name.Contains(field) ==  true);
		var edmProperty = simpleProperties.FirstOrDefault(f => _typeMapper.GetTypeName(f.TypeUsage) ==  "string");

		if(edmProperty != null || isNameObject)
		{
			var propName = isNameObject ? (_code.Escape(navigationProperty) + "Name") : (_code.Escape(edmProperty).StartsWith(_code.Escape(navigationProperty)) || endEntityTypes.Length > 1 ?   _code.Escape(edmProperty) : (_code.Escape(navigationProperty) + _code.Escape(edmProperty)));
			result = string.Format(
						CultureInfo.InvariantCulture,
						"{0} = x.{1} != null ? x.{1}.{2} : null,",
						propName,
						_code.Escape(navigationProperty),
						isNameObject ? "Name" : _code.Escape(edmProperty)
						);
		}
		

		return result;
	}

	public string ForeignNavigationPropertyAsDto(EntityType endEntityType, EntityType entity, NavigationProperty navigationProperty)
	{
		var result = String.Empty;

		var isNameObject = false;

		var npEndEntityType = navigationProperty.ToEndMember.GetEntityType();
		var endEntityTypes = ToSentence(_code.Escape(endEntityType),"|").Split('|');
		var entityBaseType = _typeMapper.GetTypeName(endEntityType.BaseType);
		var simpleProperties = _typeMapper.GetSimpleProperties(endEntityType);
		if(entityBaseType.StartsWith("BaseName"))
		{
			//simpleProperties = _typeMapper.GetSimpleProperties(endEntityType.BaseType);
			isNameObject = true;

		}
		var edmProperty = simpleProperties.FirstOrDefault(f => _typeMapper.GetTypeName(f.TypeUsage) ==  "string");
		if(_typeMapper.GetSimpleProperties(entity).Any(a => _code.Escape(a) == _code.Escape(edmProperty)))
		{
			edmProperty = null;
		}
		var navigationProperties = _typeMapper.GetNavigationProperties(npEndEntityType)
							.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
		if(!navigationProperties.Any(a => _code.Escape(a) == _code.Escape(endEntityType)))
		{
			isNameObject = false;
			edmProperty = null;
		}
		navigationProperties = _typeMapper.GetNavigationProperties(entity)
							.Where(np => np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many );
		if(navigationProperties.Any(a => _code.Escape(a) == _code.Escape(endEntityType)))
		{
			isNameObject = false;
			edmProperty = null;
		}

		if(edmProperty != null || isNameObject)
		{
			var propName = isNameObject ? (_code.Escape(endEntityType) + "Name") : (_code.Escape(edmProperty).StartsWith(_code.Escape(endEntityType)) || endEntityTypes.Length > 1 ?   _code.Escape(edmProperty) : (_code.Escape(endEntityType) + _code.Escape(edmProperty)));
			result = string.Format(
						CultureInfo.InvariantCulture,
						"{0} = x.{1} != null ? (x.{1}.{2} != null ? x.{1}.{2}.{3} : null) : null,",
						propName,
						_code.Escape(navigationProperty),
						_code.Escape(endEntityType),
						isNameObject ? "Name" : _code.Escape(edmProperty)
						);
		}
		

		return result;
	}

	public string ForeignPropertyToEntity(EntityType entity, NavigationProperty navigationProperty, EntityType endEntityType = null)
	{
		var result = String.Empty;

		var navEntityType = endEntityType != null ? endEntityType : navigationProperty.ToEndMember.GetEntityType();

		var isNameObject = _typeMapper.GetTypeName(navEntityType.BaseType).StartsWith("BaseName");
		var propertySuffix = isNameObject ? "Name" : String.Empty;
		var navPropertyName = endEntityType != null ? _code.Escape(navigationProperty) + _code.Escape(navEntityType) + propertySuffix : _code.Escape(navigationProperty) + propertySuffix;
		var navPropertyId = endEntityType != null ? _code.Escape(navEntityType) + "Id" : "";
		var navPropertyIdType = "int";
		if(endEntityType != null)
		{
			if(endEntityType.BaseType.Name.Contains("Short"))
				navPropertyIdType = "short";
			if(endEntityType.BaseType.Name.Contains("Long"))
				navPropertyIdType = "long";
			if(endEntityType.BaseType.Name.Contains("Byte"))
				navPropertyIdType = "byte";

		}
		
		if(!isNameObject)
		{
			var simpleProperties = _typeMapper.GetSimpleProperties(navEntityType);
			var edmProperty = simpleProperties.FirstOrDefault(f => _typeMapper.GetTypeName(f.TypeUsage) ==  "string");
			propertySuffix = edmProperty != null ? _code.Escape(edmProperty) : String.Empty;

			if(endEntityType != null)
			{
				navPropertyName = _code.Escape(navigationProperty) + _code.Escape(navEntityType) + propertySuffix;
			}
			else
			{
				// navPropertyName = _code.Escape(navigationProperty) == _code.Escape(navEntityType) ? propertySuffix : _code.Escape(navigationProperty) + propertySuffix;
				navPropertyName = _code.Escape(navigationProperty) + propertySuffix;
			}
		}

		if(!string.IsNullOrEmpty(propertySuffix))
		{
			if(endEntityType == null)
			{
				result = string.Format(
							CultureInfo.InvariantCulture,
							"y.{1}.{2} = x.{0};",
							navPropertyName,
							_code.Escape(navigationProperty),
							propertySuffix
							);
			}
			else
			{
				result = string.Format(
							CultureInfo.InvariantCulture,
							"y.{1}.{2}.{3} = x.{0};",
							navPropertyName,
							_code.Escape(navigationProperty),
							_code.Escape(navEntityType),
							propertySuffix
							);

				result += Environment.NewLine + "\t\t\t";

				result += string.Format(
							CultureInfo.InvariantCulture,
							"y.{1}.{2}.{3} = x.{0};",
							navPropertyId,
							_code.Escape(navigationProperty),
							_code.Escape(navEntityType),
							"Id",
							navPropertyIdType
							);


			}
		}

		return result;
	}


	public string ComplexProperty(ComplexType complexType, EdmProperty complexProperty)
	{
		//var complexType = _typeMapper.GetItemsToGenerate<ComplexType>(itemCollection).First( f => f.Name == complexProperty.TypeUsage.EdmType.Name);
		var result = string.Empty;	
		var simpleProperties = _typeMapper.GetSimpleProperties(complexType);
		if (simpleProperties.Any())
		{
			var prefix = _code.Escape(complexProperty);
			foreach(var edmProperty in simpleProperties)
			{

				var property = string.Format(
								CultureInfo.InvariantCulture,
								"{0}{1}",
								PropertyAnnotation(complexType, edmProperty, prefix),
								Property(edmProperty, prefix)
								);

				result += property + Environment.NewLine + "\t";

			}
			if(complexType.Name == "File")
			{
				var property = string.Format(
								CultureInfo.InvariantCulture,
								"/*{0}{1}*/",
								$"[Display(Name=\"{prefix} Content\")]" + Environment.NewLine + "\t",
								$"public byte[] {prefix}Content {{ get; set; }}"
								);

				result += property + Environment.NewLine + "\t";
			}

		}
		return result;
	}

	public string ComplexPropertyAsDto(ComplexType complexType, EdmProperty complexProperty)
	{
		//var complexType = _typeMapper.GetItemsToGenerate<ComplexType>(itemCollection).First( f => f.Name == complexProperty.TypeUsage.EdmType.Name);
		var result = string.Empty;	
		var simpleProperties = _typeMapper.GetSimpleProperties(complexType);
		if (simpleProperties.Any())
		{
			var prefix = _code.Escape(complexProperty);
			foreach(var edmProperty in simpleProperties)
			{
				var property = string.Format(
								CultureInfo.InvariantCulture,
								"{0}{1} = x.{0}.{1},",
								prefix,
								_code.Escape(edmProperty)
								);

				result += property + Environment.NewLine + "\t\t\t";

			}

		}
		return result;
	}
	
	public string ComplexPropertyAsEntity(ComplexType complexType, EdmProperty complexProperty)
	{
		//var complexType = _typeMapper.GetItemsToGenerate<ComplexType>(itemCollection).First( f => f.Name == complexProperty.TypeUsage.EdmType.Name);
		var result = string.Empty;	
		var simpleProperties = _typeMapper.GetSimpleProperties(complexType);
		if (simpleProperties.Any())
		{
			var prefix = _code.Escape(complexProperty);
			result = string.Format(
								CultureInfo.InvariantCulture,
								"{0} = new {1}{{",
								prefix,
								_typeMapper.GetTypeName(complexProperty.TypeUsage) + Environment.NewLine + "\t\t\t"
								);

			foreach(var edmProperty in simpleProperties)
			{
				var property = string.Format(
								CultureInfo.InvariantCulture,
								"{2}{0} = x.{1}{0},",
								_code.Escape(edmProperty),
								prefix,
								Environment.NewLine + "\t\t\t\t"
								);

				result += property;

			}

			result += Environment.NewLine + "\t\t\t" + "},";
		}
		return result;
	}

	public string ComplexPropertyToEntity(ComplexType complexType, EdmProperty complexProperty)
	{
		//var complexType = _typeMapper.GetItemsToGenerate<ComplexType>(itemCollection).First( f => f.Name == complexProperty.TypeUsage.EdmType.Name);
		var result = string.Empty;	
		var simpleProperties = _typeMapper.GetSimpleProperties(complexType);
		if (simpleProperties.Any())
		{
			var prefix = _code.Escape(complexProperty);
			foreach(var edmProperty in simpleProperties)
			{
				var property = string.Format(
								CultureInfo.InvariantCulture,
								"y.{0}.{1} = x.{0}{1};",
								prefix,
								_code.Escape(edmProperty)
								);

				result += property + Environment.NewLine + "\t\t\t";

			}
		}
		return result;
	}
	
	
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(EntityType entity, string baseType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}partial class {2}{3}",
            Accessibility.ForType(entity),
            _code.SpaceAfter(_code.AbstractOption(entity)),
            _code.Escape(entity) + "Dto",
            _code.StringBefore(" : ", (_typeMapper.GetTypeName(entity.BaseType) != null ?  _typeMapper.GetTypeName(entity.BaseType) + "Dto" : baseType))
			);
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1}Dto : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + parameter.RawClrTypeName + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
		var ns = GetRootNamespace();
		// var ns = GetNamespace();

        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}{2}{3}" +
                "{4}{5}{6}{7}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                (Environment.NewLine + "using System.ComponentModel.DataAnnotations;"),
                (Environment.NewLine + "using System.ComponentModel.DataAnnotations.Schema;"),
                (Environment.NewLine + "using System.Linq;"),
                (Environment.NewLine + "using System.Linq.Expressions;"),
                //(Environment.NewLine + "using Ark.ResultCheckers.Entities;"),
                (Environment.NewLine + "using " + ns + ".Entities;"),
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "{0}?", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public class EdmMetadataLoader
{
    private readonly IDynamicHost _host;
    private readonly System.Collections.IList _errors;

    public EdmMetadataLoader(IDynamicHost host, System.Collections.IList errors)
    {
        ArgumentNotNull(host, "host");
        ArgumentNotNull(errors, "errors");

        _host = host;
        _errors = errors;
    }

    public IEnumerable<GlobalItem> CreateEdmItemCollection(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        if (!ValidateInputPath(sourcePath))
        {
            return new EdmItemCollection();
        }

        var schemaElement = LoadRootElement(_host.ResolvePath(sourcePath));
        if (schemaElement != null)
        {
            using (var reader = schemaElement.CreateReader())
            {
                IList<EdmSchemaError> errors;
                var itemCollection = MetadataItemCollectionFactory.CreateEdmItemCollection(new[] { reader }, out errors);

                ProcessErrors(errors, sourcePath);

                return itemCollection;
            }
        }
        return new EdmItemCollection();
    }

    public string GetModelNamespace(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        if (!ValidateInputPath(sourcePath))
        {
            return string.Empty;
        }

        var model = LoadRootElement(_host.ResolvePath(sourcePath));
        if (model == null)
        {
            return string.Empty;
        }

        var attribute = model.Attribute("Namespace");
        return attribute != null ? attribute.Value : "";
    }

    private bool ValidateInputPath(string sourcePath)
    {
        if (sourcePath == "$" + "edmxInputFile" + "$")
        {
            _errors.Add(
                new CompilerError(_host.TemplateFile ?? sourcePath, 0, 0, string.Empty,
                    GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return false;
        }

        return true;
    }

    public XElement LoadRootElement(string sourcePath)
    {
        ArgumentNotNull(sourcePath, "sourcePath");

        var root = XElement.Load(sourcePath, LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);
        return root.Elements()
            .Where(e => e.Name.LocalName == "Runtime")
            .Elements()
            .Where(e => e.Name.LocalName == "ConceptualModels")
            .Elements()
            .Where(e => e.Name.LocalName == "Schema")
            .FirstOrDefault()
                ?? root;
    }

    private void ProcessErrors(IEnumerable<EdmSchemaError> errors, string sourceFilePath)
    {
        foreach (var error in errors)
        {
            _errors.Add(
                new CompilerError(
                    error.SchemaLocation ?? sourceFilePath,
                    error.Line,
                    error.Column,
                    error.ErrorCode.ToString(CultureInfo.InvariantCulture),
                    error.Message)
                {
                    IsWarning = error.Severity == EdmSchemaErrorSeverity.Warning
                });
        }
    }
    
    public bool IsLazyLoadingEnabled(EntityContainer container)
    {
        string lazyLoadingAttributeValue;
        var lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
        bool isLazyLoading;
        return !MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue)
            || !bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading)
            || isLazyLoading;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
    
private static readonly Lazy<System.Resources.ResourceManager> ResourceManager =
    new Lazy<System.Resources.ResourceManager>(
        () => new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(MetadataItemCollectionFactory).Assembly), isThreadSafe: true);

public static string GetResourceString(string resourceName)
{
    ArgumentNotNull(resourceName, "resourceName");

    return ResourceManager.Value.GetString(resourceName, null);
}

#>