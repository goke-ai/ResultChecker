//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ark.ResultCheckers.Dtos
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Linq.Expressions;
    using Ark.ResultCheckers.Entities;
    
    public partial class BaseEntityDto
    {
        public BaseEntityDto()
        {
    		
            OnInitialize();
        }
    
        partial void OnInitialize();
    
        [Key]
    	[Display(Name = "Id")]
    	public int Id { get; set; }
    	private static Expression<Func<BaseEntity, BaseEntityDto>> _asBaseEntityDto;
        public static Expression<Func<BaseEntity, BaseEntityDto>> AsBaseEntityDto
        {
            get
            {
                SetConverters();
                return _asBaseEntityDto;
            }
        }
        
        private static Func<BaseEntity, BaseEntityDto> _asBaseEntityDtoFunc;
        public static Func<BaseEntity, BaseEntityDto> AsBaseEntityDtoFunc
        {
            get
            {
                SetConverters();
                return _asBaseEntityDtoFunc;
            }
        }
        
        private static Expression<Func<BaseEntityDto, BaseEntity>> _asBaseEntity;
        public static Expression<Func<BaseEntityDto, BaseEntity>> AsBaseEntity
        {
            get
            {
                SetConverters();
                return _asBaseEntity;
            }
        }
        
        private static Func<BaseEntityDto, BaseEntity> _asBaseEntityFunc;
        public static Func<BaseEntityDto, BaseEntity> AsBaseEntityFunc
        {
            get
            {
                SetConverters();
                return _asBaseEntityFunc;
            }
        }
    
    	private static Func<BaseEntity, BaseEntityDto, BaseEntity> _toBaseEntityFunc;
        public static Func<BaseEntity, BaseEntityDto, BaseEntity> ToBaseEntityFunc
        {
            get
            {
                SetConverters();
                return _toBaseEntityFunc;
            }
        }
    
    	/*
    	private static Expression<Func<BaseEntity, string>> _orderBaseEntity;
        public static Expression<Func<BaseEntity, string>> OrderBaseEntity
        {
            get
            {
                SetConverters();
                return _orderBaseEntity;
            }
        }
    	*/
    
    	private static Expression<Func<BaseEntity, bool>> SearchExpression(string searchString)
        {
            return 
    				w => w.Id.ToString().Contains(searchString) 
    			;
        }
    
        static IOrderedQueryable<BaseEntity> _orderQuery;
        public static IOrderedQueryable<BaseEntity> OrderBy(IQueryable<BaseEntity> query)
        {
    		_orderQuery = query.OrderBy(o => o.Id);
    		OnSetOrderQuery(query);
            return _orderQuery;
        }
    
        static IOrderedQueryable<BaseEntityDto> _orderQueryDto;
        public static IOrderedQueryable<BaseEntityDto> OrderBy(IQueryable<BaseEntityDto> query)
        {
    		_orderQueryDto = query.OrderBy(o => o.Id);
            OnSetOrderQuery(query);
            return _orderQueryDto;
        }
    
    
    	private static void SetConverters()
        {
            _asBaseEntityDto = x => new BaseEntityDto
            {
    			// +simplex
    			Id = x.Id,
            };
    
            _asBaseEntity = x => new BaseEntity
            {
    			// +simple
    			Id = x.Id,
                 
            };
    
            _toBaseEntityFunc = (y,x) => {
    			// +simple
    			y.Id = x.Id;
          
    			return y;
            };
    
            OnSetConverters();
    
            _asBaseEntityFunc = _asBaseEntity.Compile();
            _asBaseEntityDtoFunc = _asBaseEntityDto.Compile();
        }
    
        static partial void OnSetConverters();
        static partial void OnSetOrderQuery(IQueryable<BaseEntity> query);
        static partial void OnSetOrderQuery(IQueryable<BaseEntityDto> query);
        static partial void OnSetSearchQuery(IQueryable<BaseEntity> query, string searchString);
        static partial void OnSetOrders();
        static partial void OnSetIncludeNavigations();
        static partial void OnSetFilters(string searchString);
    }
}
