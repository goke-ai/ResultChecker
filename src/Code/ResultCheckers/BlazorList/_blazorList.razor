<!--
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
-->

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@AppSettings" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="key">@Localize["Key"]</MatSortHeader>
			<MatSortHeader SortId="value">@Localize["Value"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="appSetting">
		@if (IsAdmin)
		{
			<td>@appSetting.Id</td>
		}
			<td>@appSetting.Key</td>
			<td>@appSetting.Value</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current appSetting -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(appSetting))" Icon="@MatIconNames.Edit" title="@(Localize["Edit App Setting"])">@(Localize["Edit App Setting"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(appSetting)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "Key", Text="Key" },
            new MatFilter{ Key= "Value", Text="Value" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<AppSettingDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public AppSettingDto[] AppSettings { get; set; }

	[Parameter] public EventCallback<AppSettingDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<AppSettingDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (AppSettingDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // appSettings = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<AppSettingDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "key":
                    comparison = (s1, s2) => string.Compare(s1.Key.ToString(), s2.Key.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "value":
                    comparison = (s1, s2) => string.Compare(s1.Value.ToString(), s2.Value.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(AppSettings, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(AppSettings, comparison);
                }
            }
        }
    }



}

@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@Cards" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="pin">@Localize["Pin"]</MatSortHeader>
			<MatSortHeader SortId="owner">@Localize["Owner"]</MatSortHeader>
			<MatSortHeader SortId="role">@Localize["Role"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="card">
		@if (IsAdmin)
		{
			<td>@card.Id</td>
		}
			<td>@card.Pin</td>
			<td>@card.Owner</td>
			<td>@card.Role</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current card -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(card))" Icon="@MatIconNames.Edit" title="@(Localize["Edit Card"])">@(Localize["Edit Card"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(card)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "Pin", Text="Pin" },
            new MatFilter{ Key= "Owner", Text="Owner" },
            new MatFilter{ Key= "Role", Text="Role" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<CardDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public CardDto[] Cards { get; set; }

	[Parameter] public EventCallback<CardDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<CardDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (CardDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // cards = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<CardDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "pin":
                    comparison = (s1, s2) => string.Compare(s1.Pin.ToString(), s2.Pin.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "owner":
                    comparison = (s1, s2) => string.Compare(s1.Owner.ToString(), s2.Owner.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "role":
                    comparison = (s1, s2) => string.Compare(s1.Role.ToString(), s2.Role.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(Cards, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(Cards, comparison);
                }
            }
        }
    }



}

@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@Courses" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="code">@Localize["Code"]</MatSortHeader>
			<MatSortHeader SortId="title">@Localize["Title"]</MatSortHeader>
			<MatSortHeader SortId="unit">@Localize["Unit"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="course">
		@if (IsAdmin)
		{
			<td>@course.Id</td>
		}
			<td>@course.Code</td>
			<td>@course.Title</td>
			<td>@course.Unit</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current course -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(course))" Icon="@MatIconNames.Edit" title="@(Localize["Edit Course"])">@(Localize["Edit Course"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(course)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "Code", Text="Code" },
            new MatFilter{ Key= "Title", Text="Title" },
            new MatFilter{ Key= "Unit", Text="Unit" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<CourseDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public CourseDto[] Courses { get; set; }

    //<!-- StudentCourses | StudentCourse | Collectiion -->

	[Parameter] public EventCallback<CourseDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<CourseDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (CourseDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // courses = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<CourseDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "code":
                    comparison = (s1, s2) => string.Compare(s1.Code.ToString(), s2.Code.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "title":
                    comparison = (s1, s2) => string.Compare(s1.Title.ToString(), s2.Title.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "unit":
                    comparison = (s1, s2) => string.Compare(s1.Unit.ToString(), s2.Unit.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(Courses, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(Courses, comparison);
                }
            }
        }
    }



}

@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@Grades" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="name">@Localize["Name"]</MatSortHeader>
			<MatSortHeader SortId="beginmark">@Localize["Begin Mark"]</MatSortHeader>
			<MatSortHeader SortId="nextbeginmark">@Localize["Next Begin Mark"]</MatSortHeader>
			<MatSortHeader SortId="point">@Localize["Point"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="grade">
		@if (IsAdmin)
		{
			<td>@grade.Id</td>
		}
			<td>@grade.Name</td>
			<td>@grade.BeginMark</td>
			<td>@grade.NextBeginMark</td>
			<td>@grade.Point</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current grade -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(grade))" Icon="@MatIconNames.Edit" title="@(Localize["Edit Grade"])">@(Localize["Edit Grade"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(grade)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "Name", Text="Name" },
            new MatFilter{ Key= "BeginMark", Text="Begin Mark" },
            new MatFilter{ Key= "NextBeginMark", Text="Next Begin Mark" },
            new MatFilter{ Key= "Point", Text="Point" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<GradeDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public GradeDto[] Grades { get; set; }

	[Parameter] public EventCallback<GradeDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<GradeDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (GradeDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // grades = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<GradeDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "name":
                    comparison = (s1, s2) => string.Compare(s1.Name, s2.Name, StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(Grades, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(Grades, comparison);
                }
            }
        }
    }



}

@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@Semesters" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="name">@Localize["Name"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="semester">
		@if (IsAdmin)
		{
			<td>@semester.Id</td>
		}
			<td>@semester.Name</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current semester -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(semester))" Icon="@MatIconNames.Edit" title="@(Localize["Edit Semester"])">@(Localize["Edit Semester"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(semester)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "Name", Text="Name" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<SemesterDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public SemesterDto[] Semesters { get; set; }

    //<!-- StudentCourses | StudentCourse | Collectiion -->

	[Parameter] public EventCallback<SemesterDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<SemesterDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (SemesterDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // semesters = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<SemesterDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "name":
                    comparison = (s1, s2) => string.Compare(s1.Name, s2.Name, StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(Semesters, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(Semesters, comparison);
                }
            }
        }
    }



}

@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@Sessions" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="name">@Localize["Name"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="session">
		@if (IsAdmin)
		{
			<td>@session.Id</td>
		}
			<td>@session.Name</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current session -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(session))" Icon="@MatIconNames.Edit" title="@(Localize["Edit Session"])">@(Localize["Edit Session"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(session)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "Name", Text="Name" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<SessionDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public SessionDto[] Sessions { get; set; }

    //<!-- StudentCourses | StudentCourse | Collectiion -->

	[Parameter] public EventCallback<SessionDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<SessionDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (SessionDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // sessions = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<SessionDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "name":
                    comparison = (s1, s2) => string.Compare(s1.Name, s2.Name, StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(Sessions, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(Sessions, comparison);
                }
            }
        }
    }



}

@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@Students" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="matricno">@Localize["Matric No"]</MatSortHeader>
			<MatSortHeader SortId="lastname">@Localize["Lastname"]</MatSortHeader>
			<MatSortHeader SortId="firstname">@Localize["Firstname"]</MatSortHeader>
			<MatSortHeader SortId="middlename">@Localize["Middlename"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="student">
		@if (IsAdmin)
		{
			<td>@student.Id</td>
		}
			<td>@student.MatricNo</td>
			<td>@student.Lastname</td>
			<td>@student.Firstname</td>
			<td>@student.Middlename</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current student -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(student))" Icon="@MatIconNames.Edit" title="@(Localize["Edit Student"])">@(Localize["Edit Student"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(student)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "MatricNo", Text="Matric No" },
            new MatFilter{ Key= "Lastname", Text="Lastname" },
            new MatFilter{ Key= "Firstname", Text="Firstname" },
            new MatFilter{ Key= "Middlename", Text="Middlename" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<StudentDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public StudentDto[] Students { get; set; }

    //<!-- StudentCourses | StudentCourse | Collectiion -->

	[Parameter] public EventCallback<StudentDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<StudentDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (StudentDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // students = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<StudentDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "matricno":
                    comparison = (s1, s2) => string.Compare(s1.MatricNo.ToString(), s2.MatricNo.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "lastname":
                    comparison = (s1, s2) => string.Compare(s1.Lastname.ToString(), s2.Lastname.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "firstname":
                    comparison = (s1, s2) => string.Compare(s1.Firstname.ToString(), s2.Firstname.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "middlename":
                    comparison = (s1, s2) => string.Compare(s1.Middlename.ToString(), s2.Middlename.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(Students, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(Students, comparison);
                }
            }
        }
    }



}

@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@StudentCourses" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="sessionname">@Localize["Session Name"]</MatSortHeader>
			<MatSortHeader SortId="semestername">@Localize["Semester Name"]</MatSortHeader>
			<MatSortHeader SortId="studentdescription">@Localize["Student Description"]</MatSortHeader>
			<MatSortHeader SortId="coursedescription">@Localize["Course Description"]</MatSortHeader>
			<MatSortHeader SortId="score">@Localize["Score"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="studentCourse">
		@if (IsAdmin)
		{
			<td>@studentCourse.Id</td>
		}
			<td>@studentCourse.SessionName</td>

			<td>@studentCourse.SemesterName</td>

			<td>@studentCourse.StudentDescription</td>

			<td>@studentCourse.CourseDescription</td>

			<td>@studentCourse.Score</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current studentCourse -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(studentCourse))" Icon="@MatIconNames.Edit" title="@(Localize["Edit Student Course"])">@(Localize["Edit Student Course"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(studentCourse)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "SessionName", Text="Session Name" },
            new MatFilter{ Key= "SemesterName", Text="Semester Name" },
            new MatFilter{ Key= "StudentDescription", Text="Student Description" },
            new MatFilter{ Key= "CourseDescription", Text="Course Description" },
            new MatFilter{ Key= "Score", Text="Score" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<StudentCourseDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public StudentCourseDto[] StudentCourses { get; set; }

	// <!-- ForeignKey StudentId | @int -->
	// <!-- Student | Student |  -->
	[Parameter] public StudentCache[] studentCaches { get; set; }

	// <!-- ForeignKey CourseId | @int -->
	// <!-- Course | Course |  -->
	[Parameter] public CourseCache[] courseCaches { get; set; }

	// <!-- ForeignKey SessionId | Nullable<int> -->
	// <!-- Session | Session | Nullable -->
	[Parameter] public SessionCache[] sessionCaches { get; set; }

	// <!-- ForeignKey SemesterId | Nullable<int> -->
	// <!-- Semester | Semester | Nullable -->
	[Parameter] public SemesterCache[] semesterCaches { get; set; }

	[Parameter] public EventCallback<StudentCourseDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<StudentCourseDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (StudentCourseDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // studentCourses = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<StudentCourseDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "sessionname":
                    comparison = (s1, s2) => string.Compare(s1.SessionName, s2.SessionName, StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "semestername":
                    comparison = (s1, s2) => string.Compare(s1.SemesterName, s2.SemesterName, StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "studentdescription":
                    comparison = (s1, s2) => string.Compare(s1.StudentDescription, s2.StudentDescription, StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "coursedescription":
                    comparison = (s1, s2) => string.Compare(s1.CourseDescription, s2.CourseDescription, StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "score":
                    comparison = (s1, s2) => string.Compare(s1.Score.ToString(), s2.Score.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(StudentCourses, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(StudentCourses, comparison);
                }
            }
        }
    }



}

