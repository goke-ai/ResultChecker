<!--
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
-->

@inject IStringLocalizer<App> Localize

<div class="grid-area">
	<MatSelectItem Label="Select filter column" @bind-Value="SelectFilterByColumn" Items="@FilterColumns" Style="display: inline;">
        <ItemTemplate Context="filter">
            <span>@filter?.Text</span>
        </ItemTemplate>
    </MatSelectItem>
	<MatTable Items="@AppSettings" class="mat-elevation-z5" Striped="true" ShowPaging="true" FilterByColumnName="@(SelectFilterByColumn?.Key)"
				UseSortHeaderRow="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Style="white-space:nowrap">
		<MatTableHeader>
			<MatSortHeaderRow SortChanged="@SortData">
			@if (IsAdmin)
			{
				<MatSortHeader SortId="id">@Localize["Id"]</MatSortHeader>
			}
			<MatSortHeader SortId="key">@Localize["Key"]</MatSortHeader>
			<MatSortHeader SortId="value">@Localize["Value"]</MatSortHeader>
			<MatSortHeader>@EditColumnName</MatSortHeader>
		</MatSortHeaderRow>
	</MatTableHeader>
	<MatTableRow Context="appSetting">
		@if (IsAdmin)
		{
			<td>@appSetting.Id</td>
		}
			<td>@appSetting.Key</td>
			<td>@appSetting.Value</td>
			<td>
				@if(CanUpdate)
				{
				<!-- Edit the current appSetting -->
				<MatButton Raised="true" @onclick="(() => OnEdit.InvokeAsync(appSetting))" Icon="@MatIconNames.Edit" title="@(Localize["Edit App Setting"])">@(Localize["Edit App Setting"])</MatButton>
				}
				@if (EditColumnRowTemplate != null)
                {
					@EditColumnRowTemplate(appSetting)
                }
			</td>
		</MatTableRow>
	</MatTable>
</div>

	
@code {
    
	[Parameter] public String SelectFilterColumnKey { get; set; }
	public MatFilter SelectFilterByColumn { get; set; }
    [Parameter] public MatFilter[] FilterColumns { get; set; } = new[]
            {            
            new MatFilter{ Key= "Key", Text="Key" },
            new MatFilter{ Key= "Value", Text="Value" },
            };
	
	[Parameter] public string EditColumnName { get; set; }
	[Parameter] public RenderFragment<AppSettingDto> EditColumnRowTemplate { get; set; }

    [Parameter] public bool IsAdmin { get; set; }
    [Parameter] public bool CanUpdate { get; set; }

    [Parameter] public AppSettingDto[] AppSettings { get; set; }

	[Parameter] public EventCallback<AppSettingDto> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<AppSettingDto> OnEdit { get; set; }

	protected override void OnInitialized()
    {
        // SelectFilterByColumn = FilterColumns.FirstOrDefault();
    }
	
    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selected = (AppSettingDto)row;
            OnSelectionChanged.InvokeAsync(selected);
        }
    }

    void SortData(MatSortChangedEvent sort)
    {
        // appSettings = desserts.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<AppSettingDto> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => string.Compare(s1.Id.ToString(), s2.Id.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "key":
                    comparison = (s1, s2) => string.Compare(s1.Key.ToString(), s2.Key.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
				case "value":
                    comparison = (s1, s2) => string.Compare(s1.Value.ToString(), s2.Value.ToString(), StringComparison.InvariantCultureIgnoreCase);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(AppSettings, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(AppSettings, comparison);
                }
            }
        }
    }



}

