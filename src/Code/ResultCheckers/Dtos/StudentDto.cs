//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ark.ResultCheckers.Dtos
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Linq.Expressions;
    using Ark.ResultCheckers.Entities;
    
    public partial class StudentDto : BaseEntityDto
    {
        public StudentDto()
        {
    		
            OnInitialize();
        }
    
        partial void OnInitialize();
    
        [Required(ErrorMessage = "The Matric No is a mandatory Field.")]
    	[Display(Name = "Matric No")]
    	public string MatricNo { get; set; }
        [Required(ErrorMessage = "The Lastname is a mandatory Field.")]
    	[Display(Name = "Lastname")]
    	public string Lastname { get; set; }
        [Required(ErrorMessage = "The Firstname is a mandatory Field.")]
    	[Display(Name = "Firstname")]
    	public string Firstname { get; set; }
        [Display(Name = "Middlename")]
    	public string Middlename { get; set; }
    	private static Expression<Func<Student, StudentDto>> _asStudentDto;
        public static Expression<Func<Student, StudentDto>> AsStudentDto
        {
            get
            {
                SetConverters();
                return _asStudentDto;
            }
        }
        
        private static Func<Student, StudentDto> _asStudentDtoFunc;
        public static Func<Student, StudentDto> AsStudentDtoFunc
        {
            get
            {
                SetConverters();
                return _asStudentDtoFunc;
            }
        }
        
        private static Expression<Func<StudentDto, Student>> _asStudent;
        public static Expression<Func<StudentDto, Student>> AsStudent
        {
            get
            {
                SetConverters();
                return _asStudent;
            }
        }
        
        private static Func<StudentDto, Student> _asStudentFunc;
        public static Func<StudentDto, Student> AsStudentFunc
        {
            get
            {
                SetConverters();
                return _asStudentFunc;
            }
        }
    
    	private static Func<Student, StudentDto, Student> _toStudentFunc;
        public static Func<Student, StudentDto, Student> ToStudentFunc
        {
            get
            {
                SetConverters();
                return _toStudentFunc;
            }
        }
    
    	/*
    	private static Expression<Func<Student, string>> _orderStudent;
        public static Expression<Func<Student, string>> OrderStudent
        {
            get
            {
                SetConverters();
                return _orderStudent;
            }
        }
    	*/
    
    	private static Expression<Func<Student, bool>> SearchExpression(string searchString)
        {
            return 
    				w => w.Id.ToString().Contains(searchString) 
    			|| w.MatricNo.Contains(searchString) //@string
    			|| w.Lastname.Contains(searchString) //@string
    			|| w.Firstname.Contains(searchString) //@string
    			|| w.Middlename.Contains(searchString) //@string
    			;
        }
    
        static IQueryable<Student> _searchQuery;
        public static IQueryable<Student> Search(IQueryable<Student> query, string searchString)
        {
            _searchQuery = query.Where(
    						SearchExpression(searchString)
    					);
    		OnSetSearchQuery(query, searchString);
    		return _searchQuery;
    	}
    
        static IOrderedQueryable<Student> _orderQuery;
        public static IOrderedQueryable<Student> OrderBy(IQueryable<Student> query)
        {
    		_orderQuery = query.OrderBy(o => o.Id);
    		OnSetOrderQuery(query);
            return _orderQuery;
        }
    
        static IOrderedQueryable<StudentDto> _orderQueryDto;
        public static IOrderedQueryable<StudentDto> OrderBy(IQueryable<StudentDto> query)
        {
    		_orderQueryDto = query.OrderBy(o => o.Id);
            OnSetOrderQuery(query);
            return _orderQueryDto;
        }
    
    	static string[] _includeNavigations;
        public static string[] IncludeNavigations()
        {
            _includeNavigations = new string[] { 
    		};
            OnSetIncludeNavigations();
            return _includeNavigations;
        }
    
        static Expression<Func<Student, bool>>[] _filters;
        public static Expression<Func<Student, bool>>[] Filters(string searchString)
        {
            _filters = new Expression<Func<Student, bool>>[]
    					   {
    							SearchExpression(searchString)
    
    					   };
            OnSetFilters(searchString);
            return _filters;
        }
    
    
    	private static void SetConverters()
        {
            _asStudentDto = x => new StudentDto
            {
                
                Id = x.Id,
    			// +simplex
    			MatricNo = x.MatricNo,
    			Lastname = x.Lastname,
    			Firstname = x.Firstname,
    			Middlename = x.Middlename,
                
                IsVisible = x.IsVisible,
                InsertUser = x.InsertUser,
                InsertDateTime = x.InsertDateTime,
                UpdateUser = x.UpdateUser,
                UpdateDateTime = x.UpdateDateTime,
                LastActivityUser = x.LastActivityUser,
                LastActivityDateTime = x.LastActivityDateTime,
                Version = x.Version
            };
    
            _asStudent = x => new Student
            {
                
                Id = x.Id,
    			// +simple
    			MatricNo = x.MatricNo,
    			Lastname = x.Lastname,
    			Firstname = x.Firstname,
    			Middlename = x.Middlename,
                
                IsVisible = x.IsVisible,
                InsertUser = x.InsertUser,
                InsertDateTime = x.InsertDateTime,
                UpdateUser = x.UpdateUser,
                UpdateDateTime = x.UpdateDateTime,
                LastActivityUser = x.LastActivityUser,
                LastActivityDateTime = x.LastActivityDateTime,
                Version = x.Version
                 
            };
    
            _toStudentFunc = (y,x) => {
                
                y.Id = x.Id;
    			// +simple
    			y.MatricNo = x.MatricNo;
    			y.Lastname = x.Lastname;
    			y.Firstname = x.Firstname;
    			y.Middlename = x.Middlename;
                
                y.IsVisible = x.IsVisible;
                y.InsertUser = x.InsertUser;
                y.InsertDateTime = x.InsertDateTime;
                y.UpdateUser = x.UpdateUser;
                y.UpdateDateTime = x.UpdateDateTime;
                y.LastActivityUser = x.LastActivityUser;
                y.LastActivityDateTime = x.LastActivityDateTime;
                // y.Version = x.Version;
          
    			return y;
            };
    
            OnSetConverters();
    
            _asStudentFunc = _asStudent.Compile();
            _asStudentDtoFunc = _asStudentDto.Compile();
        }
    
        static partial void OnSetConverters();
        static partial void OnSetOrderQuery(IQueryable<Student> query);
        static partial void OnSetOrderQuery(IQueryable<StudentDto> query);
        static partial void OnSetSearchQuery(IQueryable<Student> query, string searchString);
        static partial void OnSetOrders();
        static partial void OnSetIncludeNavigations();
        static partial void OnSetFilters(string searchString);
    }
}
