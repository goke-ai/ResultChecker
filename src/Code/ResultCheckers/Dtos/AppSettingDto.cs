//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ark.ResultCheckers.Dtos
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Linq.Expressions;
    using Ark.ResultCheckers.Entities;
    
    public partial class AppSettingDto : BaseEntityDto
    {
    	public String AppSettingDescription { get; private set; }
    
        public AppSettingDto()
        {
    		
            OnInitialize();
        }
    
        partial void OnInitialize();
    
        [Required(ErrorMessage = "The Key is a mandatory Field.")]
    	[MaxLength(100), StringLength(100, ErrorMessage = "The Key value cannot exceed 100 characters.")]
    	[Display(Name = "Key")]
    	public string Key { get; set; }
        [MaxLength(100), StringLength(100, ErrorMessage = "The Value value cannot exceed 100 characters.")]
    	[Display(Name = "Value")]
    	public string Value { get; set; }
    	private static Expression<Func<AppSetting, AppSettingDto>> _asAppSettingDto;
        public static Expression<Func<AppSetting, AppSettingDto>> AsAppSettingDto
        {
            get
            {
                SetConverters();
                return _asAppSettingDto;
            }
        }
        
        private static Func<AppSetting, AppSettingDto> _asAppSettingDtoFunc;
        public static Func<AppSetting, AppSettingDto> AsAppSettingDtoFunc
        {
            get
            {
                SetConverters();
                return _asAppSettingDtoFunc;
            }
        }
        
        private static Expression<Func<AppSettingDto, AppSetting>> _asAppSetting;
        public static Expression<Func<AppSettingDto, AppSetting>> AsAppSetting
        {
            get
            {
                SetConverters();
                return _asAppSetting;
            }
        }
        
        private static Func<AppSettingDto, AppSetting> _asAppSettingFunc;
        public static Func<AppSettingDto, AppSetting> AsAppSettingFunc
        {
            get
            {
                SetConverters();
                return _asAppSettingFunc;
            }
        }
    
    	private static Func<AppSetting, AppSettingDto, AppSetting> _toAppSettingFunc;
        public static Func<AppSetting, AppSettingDto, AppSetting> ToAppSettingFunc
        {
            get
            {
                SetConverters();
                return _toAppSettingFunc;
            }
        }
    
    	/*
    	private static Expression<Func<AppSetting, string>> _orderAppSetting;
        public static Expression<Func<AppSetting, string>> OrderAppSetting
        {
            get
            {
                SetConverters();
                return _orderAppSetting;
            }
        }
    	*/
    
    	private static Expression<Func<AppSetting, bool>> SearchExpression(string searchString)
        {
            return 
    				w => w.Id.ToString().Contains(searchString) 
    			|| w.Key.Contains(searchString) //@string
    			|| w.Value.Contains(searchString) //@string
    			;
        }
    
        static IQueryable<AppSetting> _searchQuery;
        public static IQueryable<AppSetting> Search(IQueryable<AppSetting> query, string searchString)
        {
            _searchQuery = query.Where(
    						SearchExpression(searchString)
    					);
    		OnSetSearchQuery(query, searchString);
    		return _searchQuery;
    	}
    
        static IOrderedQueryable<AppSetting> _orderQuery;
        public static IOrderedQueryable<AppSetting> OrderBy(IQueryable<AppSetting> query)
        {
    		_orderQuery = query.OrderBy(o => o.Id);
    		OnSetOrderQuery(query);
            return _orderQuery;
        }
    
        static IOrderedQueryable<AppSettingDto> _orderQueryDto;
        public static IOrderedQueryable<AppSettingDto> OrderBy(IQueryable<AppSettingDto> query)
        {
    		_orderQueryDto = query.OrderBy(o => o.Id);
            OnSetOrderQuery(query);
            return _orderQueryDto;
        }
    
    	static string[] _includeNavigations;
        public static string[] IncludeNavigations()
        {
            _includeNavigations = new string[] { 
    		};
            OnSetIncludeNavigations();
            return _includeNavigations;
        }
    
        static Expression<Func<AppSetting, bool>>[] _filters;
        public static Expression<Func<AppSetting, bool>>[] Filters(string searchString)
        {
            _filters = new Expression<Func<AppSetting, bool>>[]
    					   {
    							SearchExpression(searchString)
    
    					   };
            OnSetFilters(searchString);
            return _filters;
        }
    
    
    	private static void SetConverters()
        {
            _asAppSettingDto = x => new AppSettingDto
            {
    			AppSettingDescription = x.AppSettingDescription,
                
                Id = x.Id,
    			// +simplex
    			Key = x.Key,
    			Value = x.Value,
                
                IsVisible = x.IsVisible,
                InsertUser = x.InsertUser,
                InsertDateTime = x.InsertDateTime,
                UpdateUser = x.UpdateUser,
                UpdateDateTime = x.UpdateDateTime,
                LastActivityUser = x.LastActivityUser,
                LastActivityDateTime = x.LastActivityDateTime,
                Version = x.Version
            };
    
            _asAppSetting = x => new AppSetting
            {
                
                Id = x.Id,
    			// +simple
    			Key = x.Key,
    			Value = x.Value,
                
                IsVisible = x.IsVisible,
                InsertUser = x.InsertUser,
                InsertDateTime = x.InsertDateTime,
                UpdateUser = x.UpdateUser,
                UpdateDateTime = x.UpdateDateTime,
                LastActivityUser = x.LastActivityUser,
                LastActivityDateTime = x.LastActivityDateTime,
                Version = x.Version
                 
            };
    
            _toAppSettingFunc = (y,x) => {
                
                y.Id = x.Id;
    			// +simple
    			y.Key = x.Key;
    			y.Value = x.Value;
                
                y.IsVisible = x.IsVisible;
                y.InsertUser = x.InsertUser;
                y.InsertDateTime = x.InsertDateTime;
                y.UpdateUser = x.UpdateUser;
                y.UpdateDateTime = x.UpdateDateTime;
                y.LastActivityUser = x.LastActivityUser;
                y.LastActivityDateTime = x.LastActivityDateTime;
                // y.Version = x.Version;
          
    			return y;
            };
    
            OnSetConverters();
    
            _asAppSettingFunc = _asAppSetting.Compile();
            _asAppSettingDtoFunc = _asAppSettingDto.Compile();
        }
    
        static partial void OnSetConverters();
        static partial void OnSetOrderQuery(IQueryable<AppSetting> query);
        static partial void OnSetOrderQuery(IQueryable<AppSettingDto> query);
        static partial void OnSetSearchQuery(IQueryable<AppSetting> query, string searchString);
        static partial void OnSetOrders();
        static partial void OnSetIncludeNavigations();
        static partial void OnSetFilters(string searchString);
    }
}
