//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using Ark.ResultCheckers.Data;
using Ark.ResultCheckers.Entities;
using Ark.ResultCheckers.Dtos;
using Ark.ResultCheckers.Dtos.Caches;

namespace Ark.ResultCheckers.Data.Services
{
    public partial class CardService : BaseService
    {
    
        public CardService(AppDbContext context)
        : base(context)
        {
           
        }
    
        // +EntityQuery
        public static IQueryable<Card> EntityQuery(AppDbContext context, string[] includeNavigations, params Expression<Func<Card, bool>>[] filters)
        {
            var query = context.Cards.AsQueryable();
    
            if (includeNavigations != null && includeNavigations.Count() > 0)
            {
                // include navigation entity
                foreach (var navigation in includeNavigations)
                {
                    query = query.Include(navigation);
                }
            }
    
            if (filters != null && filters.Count() > 0)
            {
                // filter entity
                foreach (var filter in filters)
                {
                    query = query.Where(filter);
                }
            }
    
            return query;
        }
    
        protected IQueryable<CardDto> CardQuery(String[] includeNavigations, params Expression<Func<Card, bool>>[] filters)
        {
            var query = EntityQuery(_context, includeNavigations, filters);
    
            return query.Select(CardDto.AsCardDto);
        }        
    
        public async Task<List<CardDto>> GetCardsAsync(String[] includeNavigations, params Expression<Func<Card, bool>>[] filters)
        {
            IQueryable<CardDto> query = CardQuery(includeNavigations, filters);
    
            return await query
                        // Use AsNoTracking to disable EF change tracking
                        // Use ToListAsync to avoid blocking a thread
                        .AsNoTracking().ToListAsync();
        }
    
        public async Task<CardDto> GetCardAsync(String[] includeNavigations, params Expression<Func<Card, bool>>[] filters)
        {
            // Get Card  
            IQueryable<CardDto> query = CardQuery(includeNavigations, filters);
    
            return await query
                    // Use AsNoTracking to disable EF change tracking
                    // Use ToListAsync to avoid blocking a thread
                    .AsNoTracking().FirstOrDefaultAsync();
        }
    
        public async Task<CardDto> GetCardAsync(int id, String[] includeNavigations, params Expression<Func<Card, bool>>[] filters)
        {
            // Get Card  
            IQueryable<CardDto> query = CardQuery(includeNavigations, filters);
    
            return await query
                    // Use AsNoTracking to disable EF change tracking
                    // Use ToListAsync to avoid blocking a thread
                    .AsNoTracking().SingleOrDefaultAsync(m => m.Id == id);
        }
        // -EntityQuery
    
        // +DtoQuery
        public static IQueryable<CardDto> DtoQuery(AppDbContext context, string[] includeNavigations, params Expression<Func<CardDto, bool>>[] filters)
        {
            var query = context.Cards.AsQueryable();
    
            if (includeNavigations != null && includeNavigations.Count() > 0)
            {
                // include navigation entity
                foreach (var navigation in includeNavigations)
                {
                    query = query.Include(navigation);
                }
            }
    
            var query2 = query.Select(CardDto.AsCardDto);
    
            if (filters != null && filters.Count() > 0)
            {
                // filter entity
                foreach (var filter in filters)
                {
                    query2 = query2.Where(filter);
                }
            }
    
            return query2;
        }
    
        protected IQueryable<CardDto> CardDtoQuery(String[] includeNavigations, params Expression<Func<CardDto, bool>>[] filters)
        {
            var query = DtoQuery(_context, includeNavigations, filters);
    
            return query;
        }        
    
        public async Task<List<CardDto>> GetCardDtoesAsync(String[] includeNavigations, params Expression<Func<CardDto, bool>>[] filters)
        {
    
            IQueryable<CardDto> query = CardDtoQuery(includeNavigations, filters);
    
            return await query
                        // Use AsNoTracking to disable EF change tracking
                        // Use ToListAsync to avoid blocking a thread
                        .AsNoTracking().ToListAsync();
        }
    
        public async Task<CardDto> GetCardDtoAsync(String[] includeNavigations, params Expression<Func<CardDto, bool>>[] filters)
        {
            // Get Card  
            IQueryable<CardDto> query = CardDtoQuery(includeNavigations, filters);
    
            return await query
                    // Use AsNoTracking to disable EF change tracking
                    // Use ToListAsync to avoid blocking a thread
                    .AsNoTracking().FirstOrDefaultAsync();
        }
    
        public async Task<CardDto> GetCardDtoAsync(int id, String[] includeNavigations, params Expression<Func<CardDto, bool>>[] filters)
        {
            // Get Card  
            IQueryable<CardDto> query = CardDtoQuery(includeNavigations, filters);
    
            return await query
                    // Use AsNoTracking to disable EF change tracking
                    // Use ToListAsync to avoid blocking a thread
                    .AsNoTracking().SingleOrDefaultAsync(m => m.Id == id);
        }
        // -DtoQuery
    
        public async Task<CardDto> CreateCardAsync(CardDto cardDto, string username)
        {
    
    
            OnCreate(cardDto, username);
    
            var entity = CardDto.AsCardFunc(cardDto);
            
            ToEntity(ref entity, cardDto);
            //entity.InsertUser = entity.LastActivityUser = username;
            //entity.InsertDateTime = entity.LastActivityDateTime = DateTime.UtcNow;
            entity.AddTracker(username);
    
            _context.Cards.Add(entity);
    
            OnBeforeCreate(entity, username);
            try
            {
                await _context.SaveChangesAsync();
            }
            catch(Exception ex)
            {
                // _context.Entry(entity).State = EntityState.Detached;
                throw new Exception("Add error", ex);
            }
            finally
            {
                // _context.Entry(entity).State = EntityState.Detached;
            }
            OnAfterCreate(entity, username);
    
            // cardDto = CardDto.AsCardDtoFunc(entity);
            cardDto = await GetCardDtoAsync(entity.Id, CardDto.IncludeNavigations());
        
            return cardDto;
        }
        partial void OnCreate(CardDto cardDto, string username);
        partial void OnBeforeCreate(Card entity, string username);
        partial void OnAfterCreate(Card entity, string username);
    
        public async Task<bool> UpdateCardAsync(CardDto cardDto, string username/*, String[] includeNavigations, params Expression<Func<Card, bool>>[] filters*/)
        {
            OnUpdate(cardDto, username);
            
            // Get Card  
            var entity = EntityQuery(_context, CardDto.IncludeNavigations())
                                    .FirstOrDefault(x => x.Id == cardDto.Id);
    
            if (entity != null)
            {
                entity = CardDto.ToCardFunc(entity, cardDto);
    
                ToEntity(ref entity, cardDto);
                //entity.UpdateUser = entity.LastActivityUser = username;
                //entity.UpdateDateTime = entity.LastActivityDateTime = DateTime.UtcNow;
                entity.EditTracker(username);
    
                OnBeforeUpdate(entity, username);
                try
                {
                    await _context.SaveChangesAsync();
                }
                catch(Exception ex)
                {
                    // _context.Entry(entity).State = EntityState.Detached;
                    throw new Exception("Update error", ex);
                }
                finally
                {
                    // _context.Entry(entity).State = EntityState.Detached;
                }
                OnAfterUpdate(entity, username);        
            }
            else
            {
                return false;
            }
    
            return true;
        }
        partial void OnUpdate(CardDto cardDto, string username);
        partial void OnBeforeUpdate(Card entity, string username);
        partial void OnAfterUpdate(Card entity, string username);
    
        public async Task<bool> DeleteCardAsync(CardDto cardDto)
        {
            OnDelete(cardDto);
    
            var entity = _context.Cards
                                .Where(x => x.Id == cardDto.Id)
                                .FirstOrDefault();
    
            if (entity != null)
            {
                _context.Cards.Remove(entity);
    
                OnBeforeDelete(entity);
                try
                {
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateException ex)
                {
                    // _context.Entry(entity).State = EntityState.Detached;
    
                    var sqlException = ex.GetBaseException() as SqlException;
    
                    if (sqlException != null)
                    {
                        var errorMessage = "deleting error";
    
                        var number = sqlException.Number;
        
                        if (number == 547)
                        {
                            string table = GetErrorTable(sqlException) ?? "descendant";
                            errorMessage = $"Must delete {table} records before deleting Card";
                        }
    
                        throw new Exception(errorMessage, ex);
                    }
                }
                finally
                {
                    // _context.Entry(entity).State = EntityState.Detached;
                }
                OnAfterDelete(entity);    
            }
            else
            {
                return false;
            }
    
            return true;
        }
        partial void OnDelete(CardDto cardDto);
        partial void OnBeforeDelete(Card entity);
        partial void OnAfterDelete(Card entity);
    
        public async Task<List<CardCache>> GetCardCachesAsync()
        {
            var list = await _context.Cards.Select(CardCache.AsCardCache)
                        
                        // Use AsNoTracking to disable EF change tracking
                        // Use ToListAsync to avoid blocking a thread
                        .AsNoTracking().ToListAsync();
            return list.OrderBy(o => o.Name).ToList();
        }
    
        partial void ToEntity(ref Card entity, CardDto cardDto);    
    }
}
