//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.IO;
using Microsoft.AspNetCore.Authorization;
// using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Ark.ResultCheckers.Data;
using Ark.ResultCheckers.Data.Services;
using Ark.ResultCheckers.Entities;
using Ark.ResultCheckers.Dtos;
using Ark.ResultCheckers.Dtos.Caches;

namespace Ark.ResultCheckers.Api2.Controllers
{
    [Route("api2/[controller]")]    
    [ApiController]
    // [Produces("application/json")]
    // [Route("api/StudentCourses")]    
    // [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Authorize]
    public partial class StudentCoursesController : ApiController
    {
        StudentCourseService studentCourseService;
    
        public StudentCoursesController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, StudentCourseService studentCourseService) : base(context, env, memoryCache)
        {
            this.studentCourseService = studentCourseService;
        }
    
        // GET: api/StudentCourses
        [HttpGet]
        public async Task<ActionResult<IEnumerable<StudentCourseDto>>> GetStudentCourses(string searchText = null
                // +
    			, int? sessionId = null
    			, string sessionText = null
               
                // -
                // +
    			, int? semesterId = null
    			, string semesterText = null
               
                // -
                // +
    			, int? studentId = null
    			, string studentText = null
               
                // -
                // +
    			, int? courseId = null
    			, string courseText = null
               
                // -
    			, double? scoreText = null
    		/*, int pageNumber=1, int pageSize=7*/)
        {
    
            // var studentCourses = _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto);
            List<Expression<Func<StudentCourseDto, bool>>> filters = null; 
    
            if (String.IsNullOrEmpty(searchText)
                // +
    			&& (sessionId is null)
    			&& String.IsNullOrEmpty(sessionText)
                // -
                // +
    			&& (semesterId is null)
    			&& String.IsNullOrEmpty(semesterText)
                // -
                // +
    			&& (studentId is null)
    			&& String.IsNullOrEmpty(studentText)
                // -
                // +
    			&& (courseId is null)
    			&& String.IsNullOrEmpty(courseText)
                // -
    			&& scoreText == null
    		)
            {
                // return null;
            }
            else
            {
                filters = new List<Expression<Func<StudentCourseDto, bool>>>(); 
    
    		    if (!String.IsNullOrEmpty(searchText))
                {
    			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
    			    {
    				    filters.Add(x => x.Id.ToString().Contains(searchText));
    			    }
                }
                // +
    		    if (!(sessionId is null))
    		    {
    			    filters.Add(x => x.SessionId == sessionId);
    		    }
    		    if (!String.IsNullOrEmpty(sessionText))
    		    {
    			    filters.Add(x => x.SessionName == sessionText);
    		    }
                
                // -
                // +
    		    if (!(semesterId is null))
    		    {
    			    filters.Add(x => x.SemesterId == semesterId);
    		    }
    		    if (!String.IsNullOrEmpty(semesterText))
    		    {
    			    filters.Add(x => x.SemesterName == semesterText);
    		    }
                
                // -
                // +
    		    if (!(studentId is null))
    		    {
    			    filters.Add(x => x.StudentId == studentId);
    		    }
    		    if (!String.IsNullOrEmpty(studentText))
    		    {
    			    filters.Add(x => x.StudentMatricNo == studentText);
    		    }
                
                // -
                // +
    		    if (!(courseId is null))
    		    {
    			    filters.Add(x => x.CourseId == courseId);
    		    }
    		    if (!String.IsNullOrEmpty(courseText))
    		    {
    			    filters.Add(x => x.CourseCode == courseText);
    		    }
                
                // -
    		    if (scoreText != null)
    		    {
    			    filters.Add(x => x.Score == scoreText);
    		    }
            }
    
            //sort
            //return studentCourses.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);
    
    		// OnSelectQuery(ref studentCourses);
    
            // return await studentCourses.ToListAsync();
    
            if (filters == null)
            {
                return await studentCourseService.GetStudentCourseDtoesAsync(StudentCourseDto.IncludeNavigations());
            }
            else
            {
                return await studentCourseService.GetStudentCourseDtoesAsync(StudentCourseDto.IncludeNavigations(), filters.ToArray());
            }
    
        }
    
    	partial void OnSelectQuery(ref IQueryable<StudentCourseDto> studentCourses);
    
    
        // GET: api/StudentCourses/5
        [HttpGet("{id}")]
        public async Task<ActionResult<StudentCourseDto>> GetStudentCourse(int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var studentCourse = await studentCourseService.GetStudentCourseDtoAsync(id, StudentCourseDto.IncludeNavigations());
    
            if (studentCourse == null)
            {
                return NotFound();
            }
    
            return studentCourse;
        }
    
        // PUT: api/StudentCourses/5
        [HttpPut("{id}")]
    	public async Task<IActionResult> PutStudentCourse(int id, StudentCourseDto studentCourse)
    	{
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            if (id != studentCourse.Id)
            {
                return BadRequest();
            }
    
            try
            {
    
                var updated = await studentCourseService.UpdateStudentCourseAsync(studentCourse, User.Identity.Name);
                
                if (updated)
                {
                    this.RemoveCache(CacheKeys.StudentCourse);
                }
                else
                {
                    return BadRequest("Update failed!.");
                }
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!StudentCourseExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
    
            return NoContent();
    		// return Ok(studentCourse);
        }
    
        // POST: api/StudentCourses
        [HttpPost]
        public async Task<ActionResult<StudentCourseDto>> PostStudentCourse(StudentCourseDto studentCourse)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            StudentCourseDto studentCourseDto;
            try
            {
                
                studentCourseDto = await studentCourseService.CreateStudentCourseAsync(studentCourse, User.Identity.Name);            
            
                if (studentCourseDto != null)
                {
                    this.RemoveCache(CacheKeys.StudentCourse);
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }   
    
            // var studentCourseDto = await _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto).SingleOrDefaultAsync(m => m.Id == studentCourse.Id);
    
            return CreatedAtAction("GetStudentCourse", new { id = studentCourseDto.Id }, studentCourseDto);
        }
    
        // DELETE: api/StudentCourses/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<StudentCourseDto>> DeleteStudentCourse(int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var studentCourseDto = await _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto).SingleOrDefaultAsync(m => m.Id == id);
           
            if (studentCourseDto == null)
            {
                return NotFound();
            }
    
            // var studentCourse = StudentCourseDto.AsStudentCourseFunc(studentCourseDto);
    
            // _context.StudentCourses.Remove(studentCourse);
    
            // await SaveChangesAndRemoveCacheAsync(CacheKeys.StudentCourse);
            try
            {
                var deleted = await studentCourseService.DeleteStudentCourseAsync(studentCourseDto);
    
                if (deleted)
                {
                    this.RemoveCache(CacheKeys.StudentCourse);
                }
                else
                {
                    return BadRequest("Delete failed!.");
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }  
    
            return studentCourseDto;
        }
    
        private bool StudentCourseExists(int id)
        {
            return _context.StudentCourses.Any(e => e.Id == id);
        }
    
    	
    	// GET: api/StudentCourses/Cache
        [AllowAnonymous]
        [HttpGet("Cache")]
        public IEnumerable<StudentCourseCache> GetCacheStudentCourses()
        {
            return this.CacheStudentCourses();
        }
        
        
    }
}
