//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.IO;
using Microsoft.AspNetCore.Authorization;
// using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Ark.ResultCheckers.Data;
using Ark.ResultCheckers.Data.Services;
using Ark.ResultCheckers.Entities;
using Ark.ResultCheckers.Dtos;
using Ark.ResultCheckers.Dtos.Caches;

namespace Ark.ResultCheckers.Api2.Controllers
{
    [Route("api2/[controller]")]    
    [ApiController]
    // [Produces("application/json")]
    // [Route("api/Grades")]    
    // [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Authorize]
    public partial class GradesController : ApiController
    {
        GradeService gradeService;
    
        public GradesController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, GradeService gradeService) : base(context, env, memoryCache)
        {
            this.gradeService = gradeService;
        }
    
        // GET: api/Grades
        [HttpGet]
        public async Task<ActionResult<IEnumerable<GradeDto>>> GetGrades(string searchText = null
    			, double? beginMarkText = null
    			, double? nextBeginMarkText = null
    			, double? pointText = null
    		/*, int pageNumber=1, int pageSize=7*/)
        {
    
            // var grades = _context.Grades.Select(GradeDto.AsGradeDto);
            List<Expression<Func<GradeDto, bool>>> filters = null; 
    
            if (String.IsNullOrEmpty(searchText)
    			&& beginMarkText == null
    			&& nextBeginMarkText == null
    			&& pointText == null
    		)
            {
                // return null;
            }
            else
            {
                filters = new List<Expression<Func<GradeDto, bool>>>(); 
    
    		    if (!String.IsNullOrEmpty(searchText))
                {
    			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
    			    {
    				    filters.Add(x => x.Id.ToString().Contains(searchText));
    			    }
                }
    		    if (beginMarkText != null)
    		    {
    			    filters.Add(x => x.BeginMark == beginMarkText);
    		    }
    		    if (nextBeginMarkText != null)
    		    {
    			    filters.Add(x => x.NextBeginMark == nextBeginMarkText);
    		    }
    		    if (pointText != null)
    		    {
    			    filters.Add(x => x.Point == pointText);
    		    }
            }
    
            //sort
            //return grades.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);
    
    		// OnSelectQuery(ref grades);
    
            // return await grades.ToListAsync();
    
            if (filters == null)
            {
                return await gradeService.GetGradeDtoesAsync(GradeDto.IncludeNavigations());
            }
            else
            {
                return await gradeService.GetGradeDtoesAsync(GradeDto.IncludeNavigations(), filters.ToArray());
            }
    
        }
    
    	partial void OnSelectQuery(ref IQueryable<GradeDto> grades);
    
    
        // GET: api/Grades/5
        [HttpGet("{id}")]
        public async Task<ActionResult<GradeDto>> GetGrade(int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var grade = await gradeService.GetGradeDtoAsync(id, GradeDto.IncludeNavigations());
    
            if (grade == null)
            {
                return NotFound();
            }
    
            return grade;
        }
    
        // PUT: api/Grades/5
        [HttpPut("{id}")]
    	public async Task<IActionResult> PutGrade(int id, GradeDto grade)
    	{
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            if (id != grade.Id)
            {
                return BadRequest();
            }
    
            try
            {
    
                var updated = await gradeService.UpdateGradeAsync(grade, User.Identity.Name);
                
                if (updated)
                {
                    this.RemoveCache(CacheKeys.Grade);
                }
                else
                {
                    return BadRequest("Update failed!.");
                }
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!GradeExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
    
            return NoContent();
    		// return Ok(grade);
        }
    
        // POST: api/Grades
        [HttpPost]
        public async Task<ActionResult<GradeDto>> PostGrade(GradeDto grade)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            GradeDto gradeDto;
            try
            {
                
                gradeDto = await gradeService.CreateGradeAsync(grade, User.Identity.Name);            
            
                if (gradeDto != null)
                {
                    this.RemoveCache(CacheKeys.Grade);
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }   
    
            // var gradeDto = await _context.Grades.Select(GradeDto.AsGradeDto).SingleOrDefaultAsync(m => m.Id == grade.Id);
    
            return CreatedAtAction("GetGrade", new { id = gradeDto.Id }, gradeDto);
        }
    
        // DELETE: api/Grades/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<GradeDto>> DeleteGrade(int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var gradeDto = await _context.Grades.Select(GradeDto.AsGradeDto).SingleOrDefaultAsync(m => m.Id == id);
           
            if (gradeDto == null)
            {
                return NotFound();
            }
    
            // var grade = GradeDto.AsGradeFunc(gradeDto);
    
            // _context.Grades.Remove(grade);
    
            // await SaveChangesAndRemoveCacheAsync(CacheKeys.Grade);
            try
            {
                var deleted = await gradeService.DeleteGradeAsync(gradeDto);
    
                if (deleted)
                {
                    this.RemoveCache(CacheKeys.Grade);
                }
                else
                {
                    return BadRequest("Delete failed!.");
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }  
    
            return gradeDto;
        }
    
        private bool GradeExists(int id)
        {
            return _context.Grades.Any(e => e.Id == id);
        }
    
    	
    	// GET: api/Grades/Cache
        [AllowAnonymous]
        [HttpGet("Cache")]
        public IEnumerable<GradeCache> GetCacheGrades()
        {
            return this.CacheGrades();
        }
        
        
    }
}
