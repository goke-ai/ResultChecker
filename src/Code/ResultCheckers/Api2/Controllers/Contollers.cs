//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.IO;
using Microsoft.AspNetCore.Authorization;
// using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using .Data;
using .Data.Services;
using .Entities;
using .Dtos;
using .Dtos.Caches;

[Route("api2/[controller]")]    
[ApiController]
// [Produces("application/json")]
// [Route("api/AppSettings")]    
// [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
[Authorize]
public partial class AppSettingsController : ApiController
{
    AppSettingService appSettingService;

    public AppSettingsController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, AppSettingService appSettingService) : base(context, env, memoryCache)
    {
        this.appSettingService = appSettingService;
    }

    // GET: api/AppSettings
    [HttpGet]
    public async Task<ActionResult<IEnumerable<AppSettingDto>>> GetAppSettings(string searchText = null
			, string keyText = null
			, string valueText = null
		/*, int pageNumber=1, int pageSize=7*/)
    {

        // var appSettings = _context.AppSettings.Select(AppSettingDto.AsAppSettingDto);
        List<Expression<Func<AppSettingDto, bool>>> filters = null; 

        if (String.IsNullOrEmpty(searchText)
			&& String.IsNullOrEmpty(keyText)
			&& String.IsNullOrEmpty(valueText)
		)
        {
            // return null;
        }
        else
        {
            filters = new List<Expression<Func<AppSettingDto, bool>>>(); 

		    if (!String.IsNullOrEmpty(searchText))
            {
			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
			    {
				    filters.Add(x => x.Id.ToString().Contains(searchText));
			    }
            }
		    if (!String.IsNullOrEmpty(keyText))
		    {
			    filters.Add(x => x.Key == keyText);
		    }
		    if (!String.IsNullOrEmpty(valueText))
		    {
			    filters.Add(x => x.Value == valueText);
		    }
        }

        //sort
        //return appSettings.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);

		// OnSelectQuery(ref appSettings);

        // return await appSettings.ToListAsync();

        if (filters == null)
        {
            return await appSettingService.GetAppSettingDtoesAsync(AppSettingDto.IncludeNavigations());
        }
        else
        {
            return await appSettingService.GetAppSettingDtoesAsync(AppSettingDto.IncludeNavigations(), filters.ToArray());
        }

    }

	partial void OnSelectQuery(ref IQueryable<AppSettingDto> appSettings);


    // GET: api/AppSettings/5
    [HttpGet("{id}")]
    public async Task<ActionResult<AppSettingDto>> GetAppSetting(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var appSetting = await appSettingService.GetAppSettingDtoAsync(id, AppSettingDto.IncludeNavigations());

        if (appSetting == null)
        {
            return NotFound();
        }

        return appSetting;
    }

    // PUT: api/AppSettings/5
    [HttpPut("{id}")]
	public async Task<IActionResult> PutAppSetting(int id, AppSettingDto appSetting)
	{
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != appSetting.Id)
        {
            return BadRequest();
        }

        try
        {

            var updated = await appSettingService.UpdateAppSettingAsync(appSetting, User.Identity.Name);
            
            if (updated)
            {
                this.RemoveCache(CacheKeys.AppSetting);
            }
            else
            {
                return BadRequest("Update failed!.");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AppSettingExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
		// return Ok(appSetting);
    }

    // POST: api/AppSettings
    [HttpPost]
    public async Task<ActionResult<AppSettingDto>> PostAppSetting(AppSettingDto appSetting)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        AppSettingDto appSettingDto;
        try
        {
            
            appSettingDto = await appSettingService.CreateAppSettingAsync(appSetting, User.Identity.Name);            
        
            if (appSettingDto != null)
            {
                this.RemoveCache(CacheKeys.AppSetting);
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }   

        // var appSettingDto = await _context.AppSettings.Select(AppSettingDto.AsAppSettingDto).SingleOrDefaultAsync(m => m.Id == appSetting.Id);

        return CreatedAtAction("GetAppSetting", new { id = appSettingDto.Id }, appSettingDto);
    }

    // DELETE: api/AppSettings/5
    [HttpDelete("{id}")]
    public async Task<ActionResult<AppSettingDto>> DeleteAppSetting(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var appSettingDto = await _context.AppSettings.Select(AppSettingDto.AsAppSettingDto).SingleOrDefaultAsync(m => m.Id == id);
       
        if (appSettingDto == null)
        {
            return NotFound();
        }

        // var appSetting = AppSettingDto.AsAppSettingFunc(appSettingDto);

        // _context.AppSettings.Remove(appSetting);

        // await SaveChangesAndRemoveCacheAsync(CacheKeys.AppSetting);
        try
        {
            var deleted = await appSettingService.DeleteAppSettingAsync(appSettingDto);

            if (deleted)
            {
                this.RemoveCache(CacheKeys.AppSetting);
            }
            else
            {
                return BadRequest("Delete failed!.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }  

        return appSettingDto;
    }

    private bool AppSettingExists(int id)
    {
        return _context.AppSettings.Any(e => e.Id == id);
    }

	
	// GET: api/AppSettings/Cache
    [AllowAnonymous]
    [HttpGet("Cache")]
    public IEnumerable<AppSettingCache> GetCacheAppSettings()
    {
        return this.CacheAppSettings();
    }
    
    
}

[Route("api2/[controller]")]    
[ApiController]
// [Produces("application/json")]
// [Route("api/Cards")]    
// [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
[Authorize]
public partial class CardsController : ApiController
{
    CardService cardService;

    public CardsController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, CardService cardService) : base(context, env, memoryCache)
    {
        this.cardService = cardService;
    }

    // GET: api/Cards
    [HttpGet]
    public async Task<ActionResult<IEnumerable<CardDto>>> GetCards(string searchText = null
			, string pinText = null
			, string ownerText = null
			, string roleText = null
		/*, int pageNumber=1, int pageSize=7*/)
    {

        // var cards = _context.Cards.Select(CardDto.AsCardDto);
        List<Expression<Func<CardDto, bool>>> filters = null; 

        if (String.IsNullOrEmpty(searchText)
			&& String.IsNullOrEmpty(pinText)
			&& String.IsNullOrEmpty(ownerText)
			&& String.IsNullOrEmpty(roleText)
		)
        {
            // return null;
        }
        else
        {
            filters = new List<Expression<Func<CardDto, bool>>>(); 

		    if (!String.IsNullOrEmpty(searchText))
            {
			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
			    {
				    filters.Add(x => x.Id.ToString().Contains(searchText));
			    }
            }
		    if (!String.IsNullOrEmpty(pinText))
		    {
			    filters.Add(x => x.Pin == pinText);
		    }
		    if (!String.IsNullOrEmpty(ownerText))
		    {
			    filters.Add(x => x.Owner == ownerText);
		    }
		    if (!String.IsNullOrEmpty(roleText))
		    {
			    filters.Add(x => x.Role == roleText);
		    }
        }

        //sort
        //return cards.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);

		// OnSelectQuery(ref cards);

        // return await cards.ToListAsync();

        if (filters == null)
        {
            return await cardService.GetCardDtoesAsync(CardDto.IncludeNavigations());
        }
        else
        {
            return await cardService.GetCardDtoesAsync(CardDto.IncludeNavigations(), filters.ToArray());
        }

    }

	partial void OnSelectQuery(ref IQueryable<CardDto> cards);


    // GET: api/Cards/5
    [HttpGet("{id}")]
    public async Task<ActionResult<CardDto>> GetCard(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var card = await cardService.GetCardDtoAsync(id, CardDto.IncludeNavigations());

        if (card == null)
        {
            return NotFound();
        }

        return card;
    }

    // PUT: api/Cards/5
    [HttpPut("{id}")]
	public async Task<IActionResult> PutCard(int id, CardDto card)
	{
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != card.Id)
        {
            return BadRequest();
        }

        try
        {

            var updated = await cardService.UpdateCardAsync(card, User.Identity.Name);
            
            if (updated)
            {
                this.RemoveCache(CacheKeys.Card);
            }
            else
            {
                return BadRequest("Update failed!.");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CardExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
		// return Ok(card);
    }

    // POST: api/Cards
    [HttpPost]
    public async Task<ActionResult<CardDto>> PostCard(CardDto card)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        CardDto cardDto;
        try
        {
            
            cardDto = await cardService.CreateCardAsync(card, User.Identity.Name);            
        
            if (cardDto != null)
            {
                this.RemoveCache(CacheKeys.Card);
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }   

        // var cardDto = await _context.Cards.Select(CardDto.AsCardDto).SingleOrDefaultAsync(m => m.Id == card.Id);

        return CreatedAtAction("GetCard", new { id = cardDto.Id }, cardDto);
    }

    // DELETE: api/Cards/5
    [HttpDelete("{id}")]
    public async Task<ActionResult<CardDto>> DeleteCard(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var cardDto = await _context.Cards.Select(CardDto.AsCardDto).SingleOrDefaultAsync(m => m.Id == id);
       
        if (cardDto == null)
        {
            return NotFound();
        }

        // var card = CardDto.AsCardFunc(cardDto);

        // _context.Cards.Remove(card);

        // await SaveChangesAndRemoveCacheAsync(CacheKeys.Card);
        try
        {
            var deleted = await cardService.DeleteCardAsync(cardDto);

            if (deleted)
            {
                this.RemoveCache(CacheKeys.Card);
            }
            else
            {
                return BadRequest("Delete failed!.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }  

        return cardDto;
    }

    private bool CardExists(int id)
    {
        return _context.Cards.Any(e => e.Id == id);
    }

	
	// GET: api/Cards/Cache
    [AllowAnonymous]
    [HttpGet("Cache")]
    public IEnumerable<CardCache> GetCacheCards()
    {
        return this.CacheCards();
    }
    
    
}

[Route("api2/[controller]")]    
[ApiController]
// [Produces("application/json")]
// [Route("api/Courses")]    
// [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
[Authorize]
public partial class CoursesController : ApiController
{
    CourseService courseService;

    public CoursesController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, CourseService courseService) : base(context, env, memoryCache)
    {
        this.courseService = courseService;
    }

    // GET: api/Courses
    [HttpGet]
    public async Task<ActionResult<IEnumerable<CourseDto>>> GetCourses(string searchText = null
			, string codeText = null
			, string titleText = null
			, double? unitText = null
		/*, int pageNumber=1, int pageSize=7*/)
    {

        // var courses = _context.Courses.Select(CourseDto.AsCourseDto);
        List<Expression<Func<CourseDto, bool>>> filters = null; 

        if (String.IsNullOrEmpty(searchText)
			&& String.IsNullOrEmpty(codeText)
			&& String.IsNullOrEmpty(titleText)
			&& unitText == null
		)
        {
            // return null;
        }
        else
        {
            filters = new List<Expression<Func<CourseDto, bool>>>(); 

		    if (!String.IsNullOrEmpty(searchText))
            {
			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
			    {
				    filters.Add(x => x.Id.ToString().Contains(searchText));
			    }
            }
		    if (!String.IsNullOrEmpty(codeText))
		    {
			    filters.Add(x => x.Code == codeText);
		    }
		    if (!String.IsNullOrEmpty(titleText))
		    {
			    filters.Add(x => x.Title == titleText);
		    }
		    if (unitText != null)
		    {
			    filters.Add(x => x.Unit == unitText);
		    }
        }

        //sort
        //return courses.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);

		// OnSelectQuery(ref courses);

        // return await courses.ToListAsync();

        if (filters == null)
        {
            return await courseService.GetCourseDtoesAsync(CourseDto.IncludeNavigations());
        }
        else
        {
            return await courseService.GetCourseDtoesAsync(CourseDto.IncludeNavigations(), filters.ToArray());
        }

    }

	partial void OnSelectQuery(ref IQueryable<CourseDto> courses);


    // GET: api/Courses/5
    [HttpGet("{id}")]
    public async Task<ActionResult<CourseDto>> GetCourse(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var course = await courseService.GetCourseDtoAsync(id, CourseDto.IncludeNavigations());

        if (course == null)
        {
            return NotFound();
        }

        return course;
    }

    // PUT: api/Courses/5
    [HttpPut("{id}")]
	public async Task<IActionResult> PutCourse(int id, CourseDto course)
	{
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != course.Id)
        {
            return BadRequest();
        }

        try
        {

            var updated = await courseService.UpdateCourseAsync(course, User.Identity.Name);
            
            if (updated)
            {
                this.RemoveCache(CacheKeys.Course);
            }
            else
            {
                return BadRequest("Update failed!.");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CourseExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
		// return Ok(course);
    }

    // POST: api/Courses
    [HttpPost]
    public async Task<ActionResult<CourseDto>> PostCourse(CourseDto course)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        CourseDto courseDto;
        try
        {
            
            courseDto = await courseService.CreateCourseAsync(course, User.Identity.Name);            
        
            if (courseDto != null)
            {
                this.RemoveCache(CacheKeys.Course);
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }   

        // var courseDto = await _context.Courses.Select(CourseDto.AsCourseDto).SingleOrDefaultAsync(m => m.Id == course.Id);

        return CreatedAtAction("GetCourse", new { id = courseDto.Id }, courseDto);
    }

    // DELETE: api/Courses/5
    [HttpDelete("{id}")]
    public async Task<ActionResult<CourseDto>> DeleteCourse(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var courseDto = await _context.Courses.Select(CourseDto.AsCourseDto).SingleOrDefaultAsync(m => m.Id == id);
       
        if (courseDto == null)
        {
            return NotFound();
        }

        // var course = CourseDto.AsCourseFunc(courseDto);

        // _context.Courses.Remove(course);

        // await SaveChangesAndRemoveCacheAsync(CacheKeys.Course);
        try
        {
            var deleted = await courseService.DeleteCourseAsync(courseDto);

            if (deleted)
            {
                this.RemoveCache(CacheKeys.Course);
            }
            else
            {
                return BadRequest("Delete failed!.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }  

        return courseDto;
    }

    private bool CourseExists(int id)
    {
        return _context.Courses.Any(e => e.Id == id);
    }

	
	// GET: api/Courses/Cache
    [AllowAnonymous]
    [HttpGet("Cache")]
    public IEnumerable<CourseCache> GetCacheCourses()
    {
        return this.CacheCourses();
    }
    
    
}

[Route("api2/[controller]")]    
[ApiController]
// [Produces("application/json")]
// [Route("api/Grades")]    
// [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
[Authorize]
public partial class GradesController : ApiController
{
    GradeService gradeService;

    public GradesController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, GradeService gradeService) : base(context, env, memoryCache)
    {
        this.gradeService = gradeService;
    }

    // GET: api/Grades
    [HttpGet]
    public async Task<ActionResult<IEnumerable<GradeDto>>> GetGrades(string searchText = null
			, double? beginMarkText = null
			, double? nextBeginMarkText = null
			, double? pointText = null
		/*, int pageNumber=1, int pageSize=7*/)
    {

        // var grades = _context.Grades.Select(GradeDto.AsGradeDto);
        List<Expression<Func<GradeDto, bool>>> filters = null; 

        if (String.IsNullOrEmpty(searchText)
			&& beginMarkText == null
			&& nextBeginMarkText == null
			&& pointText == null
		)
        {
            // return null;
        }
        else
        {
            filters = new List<Expression<Func<GradeDto, bool>>>(); 

		    if (!String.IsNullOrEmpty(searchText))
            {
			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
			    {
				    filters.Add(x => x.Id.ToString().Contains(searchText));
			    }
            }
		    if (beginMarkText != null)
		    {
			    filters.Add(x => x.BeginMark == beginMarkText);
		    }
		    if (nextBeginMarkText != null)
		    {
			    filters.Add(x => x.NextBeginMark == nextBeginMarkText);
		    }
		    if (pointText != null)
		    {
			    filters.Add(x => x.Point == pointText);
		    }
        }

        //sort
        //return grades.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);

		// OnSelectQuery(ref grades);

        // return await grades.ToListAsync();

        if (filters == null)
        {
            return await gradeService.GetGradeDtoesAsync(GradeDto.IncludeNavigations());
        }
        else
        {
            return await gradeService.GetGradeDtoesAsync(GradeDto.IncludeNavigations(), filters.ToArray());
        }

    }

	partial void OnSelectQuery(ref IQueryable<GradeDto> grades);


    // GET: api/Grades/5
    [HttpGet("{id}")]
    public async Task<ActionResult<GradeDto>> GetGrade(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var grade = await gradeService.GetGradeDtoAsync(id, GradeDto.IncludeNavigations());

        if (grade == null)
        {
            return NotFound();
        }

        return grade;
    }

    // PUT: api/Grades/5
    [HttpPut("{id}")]
	public async Task<IActionResult> PutGrade(int id, GradeDto grade)
	{
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != grade.Id)
        {
            return BadRequest();
        }

        try
        {

            var updated = await gradeService.UpdateGradeAsync(grade, User.Identity.Name);
            
            if (updated)
            {
                this.RemoveCache(CacheKeys.Grade);
            }
            else
            {
                return BadRequest("Update failed!.");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!GradeExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
		// return Ok(grade);
    }

    // POST: api/Grades
    [HttpPost]
    public async Task<ActionResult<GradeDto>> PostGrade(GradeDto grade)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        GradeDto gradeDto;
        try
        {
            
            gradeDto = await gradeService.CreateGradeAsync(grade, User.Identity.Name);            
        
            if (gradeDto != null)
            {
                this.RemoveCache(CacheKeys.Grade);
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }   

        // var gradeDto = await _context.Grades.Select(GradeDto.AsGradeDto).SingleOrDefaultAsync(m => m.Id == grade.Id);

        return CreatedAtAction("GetGrade", new { id = gradeDto.Id }, gradeDto);
    }

    // DELETE: api/Grades/5
    [HttpDelete("{id}")]
    public async Task<ActionResult<GradeDto>> DeleteGrade(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var gradeDto = await _context.Grades.Select(GradeDto.AsGradeDto).SingleOrDefaultAsync(m => m.Id == id);
       
        if (gradeDto == null)
        {
            return NotFound();
        }

        // var grade = GradeDto.AsGradeFunc(gradeDto);

        // _context.Grades.Remove(grade);

        // await SaveChangesAndRemoveCacheAsync(CacheKeys.Grade);
        try
        {
            var deleted = await gradeService.DeleteGradeAsync(gradeDto);

            if (deleted)
            {
                this.RemoveCache(CacheKeys.Grade);
            }
            else
            {
                return BadRequest("Delete failed!.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }  

        return gradeDto;
    }

    private bool GradeExists(int id)
    {
        return _context.Grades.Any(e => e.Id == id);
    }

	
	// GET: api/Grades/Cache
    [AllowAnonymous]
    [HttpGet("Cache")]
    public IEnumerable<GradeCache> GetCacheGrades()
    {
        return this.CacheGrades();
    }
    
    
}

[Route("api2/[controller]")]    
[ApiController]
// [Produces("application/json")]
// [Route("api/Semesters")]    
// [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
[Authorize]
public partial class SemestersController : ApiController
{
    SemesterService semesterService;

    public SemestersController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, SemesterService semesterService) : base(context, env, memoryCache)
    {
        this.semesterService = semesterService;
    }

    // GET: api/Semesters
    [HttpGet]
    public async Task<ActionResult<IEnumerable<SemesterDto>>> GetSemesters(string searchText = null
		/*, int pageNumber=1, int pageSize=7*/)
    {

        // var semesters = _context.Semesters.Select(SemesterDto.AsSemesterDto);
        List<Expression<Func<SemesterDto, bool>>> filters = null; 

        if (String.IsNullOrEmpty(searchText)
		)
        {
            // return null;
        }
        else
        {
            filters = new List<Expression<Func<SemesterDto, bool>>>(); 

		    if (!String.IsNullOrEmpty(searchText))
            {
			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
			    {
				    filters.Add(x => x.Id.ToString().Contains(searchText));
			    }
            }
        }

        //sort
        //return semesters.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);

		// OnSelectQuery(ref semesters);

        // return await semesters.ToListAsync();

        if (filters == null)
        {
            return await semesterService.GetSemesterDtoesAsync(SemesterDto.IncludeNavigations());
        }
        else
        {
            return await semesterService.GetSemesterDtoesAsync(SemesterDto.IncludeNavigations(), filters.ToArray());
        }

    }

	partial void OnSelectQuery(ref IQueryable<SemesterDto> semesters);


    // GET: api/Semesters/5
    [HttpGet("{id}")]
    public async Task<ActionResult<SemesterDto>> GetSemester(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var semester = await semesterService.GetSemesterDtoAsync(id, SemesterDto.IncludeNavigations());

        if (semester == null)
        {
            return NotFound();
        }

        return semester;
    }

    // PUT: api/Semesters/5
    [HttpPut("{id}")]
	public async Task<IActionResult> PutSemester(int id, SemesterDto semester)
	{
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != semester.Id)
        {
            return BadRequest();
        }

        try
        {

            var updated = await semesterService.UpdateSemesterAsync(semester, User.Identity.Name);
            
            if (updated)
            {
                this.RemoveCache(CacheKeys.Semester);
            }
            else
            {
                return BadRequest("Update failed!.");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SemesterExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
		// return Ok(semester);
    }

    // POST: api/Semesters
    [HttpPost]
    public async Task<ActionResult<SemesterDto>> PostSemester(SemesterDto semester)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        SemesterDto semesterDto;
        try
        {
            
            semesterDto = await semesterService.CreateSemesterAsync(semester, User.Identity.Name);            
        
            if (semesterDto != null)
            {
                this.RemoveCache(CacheKeys.Semester);
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }   

        // var semesterDto = await _context.Semesters.Select(SemesterDto.AsSemesterDto).SingleOrDefaultAsync(m => m.Id == semester.Id);

        return CreatedAtAction("GetSemester", new { id = semesterDto.Id }, semesterDto);
    }

    // DELETE: api/Semesters/5
    [HttpDelete("{id}")]
    public async Task<ActionResult<SemesterDto>> DeleteSemester(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var semesterDto = await _context.Semesters.Select(SemesterDto.AsSemesterDto).SingleOrDefaultAsync(m => m.Id == id);
       
        if (semesterDto == null)
        {
            return NotFound();
        }

        // var semester = SemesterDto.AsSemesterFunc(semesterDto);

        // _context.Semesters.Remove(semester);

        // await SaveChangesAndRemoveCacheAsync(CacheKeys.Semester);
        try
        {
            var deleted = await semesterService.DeleteSemesterAsync(semesterDto);

            if (deleted)
            {
                this.RemoveCache(CacheKeys.Semester);
            }
            else
            {
                return BadRequest("Delete failed!.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }  

        return semesterDto;
    }

    private bool SemesterExists(int id)
    {
        return _context.Semesters.Any(e => e.Id == id);
    }

	
	// GET: api/Semesters/Cache
    [AllowAnonymous]
    [HttpGet("Cache")]
    public IEnumerable<SemesterCache> GetCacheSemesters()
    {
        return this.CacheSemesters();
    }
    
    
}

[Route("api2/[controller]")]    
[ApiController]
// [Produces("application/json")]
// [Route("api/Sessions")]    
// [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
[Authorize]
public partial class SessionsController : ApiController
{
    SessionService sessionService;

    public SessionsController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, SessionService sessionService) : base(context, env, memoryCache)
    {
        this.sessionService = sessionService;
    }

    // GET: api/Sessions
    [HttpGet]
    public async Task<ActionResult<IEnumerable<SessionDto>>> GetSessions(string searchText = null
		/*, int pageNumber=1, int pageSize=7*/)
    {

        // var sessions = _context.Sessions.Select(SessionDto.AsSessionDto);
        List<Expression<Func<SessionDto, bool>>> filters = null; 

        if (String.IsNullOrEmpty(searchText)
		)
        {
            // return null;
        }
        else
        {
            filters = new List<Expression<Func<SessionDto, bool>>>(); 

		    if (!String.IsNullOrEmpty(searchText))
            {
			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
			    {
				    filters.Add(x => x.Id.ToString().Contains(searchText));
			    }
            }
        }

        //sort
        //return sessions.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);

		// OnSelectQuery(ref sessions);

        // return await sessions.ToListAsync();

        if (filters == null)
        {
            return await sessionService.GetSessionDtoesAsync(SessionDto.IncludeNavigations());
        }
        else
        {
            return await sessionService.GetSessionDtoesAsync(SessionDto.IncludeNavigations(), filters.ToArray());
        }

    }

	partial void OnSelectQuery(ref IQueryable<SessionDto> sessions);


    // GET: api/Sessions/5
    [HttpGet("{id}")]
    public async Task<ActionResult<SessionDto>> GetSession(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var session = await sessionService.GetSessionDtoAsync(id, SessionDto.IncludeNavigations());

        if (session == null)
        {
            return NotFound();
        }

        return session;
    }

    // PUT: api/Sessions/5
    [HttpPut("{id}")]
	public async Task<IActionResult> PutSession(int id, SessionDto session)
	{
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != session.Id)
        {
            return BadRequest();
        }

        try
        {

            var updated = await sessionService.UpdateSessionAsync(session, User.Identity.Name);
            
            if (updated)
            {
                this.RemoveCache(CacheKeys.Session);
            }
            else
            {
                return BadRequest("Update failed!.");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SessionExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
		// return Ok(session);
    }

    // POST: api/Sessions
    [HttpPost]
    public async Task<ActionResult<SessionDto>> PostSession(SessionDto session)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        SessionDto sessionDto;
        try
        {
            
            sessionDto = await sessionService.CreateSessionAsync(session, User.Identity.Name);            
        
            if (sessionDto != null)
            {
                this.RemoveCache(CacheKeys.Session);
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }   

        // var sessionDto = await _context.Sessions.Select(SessionDto.AsSessionDto).SingleOrDefaultAsync(m => m.Id == session.Id);

        return CreatedAtAction("GetSession", new { id = sessionDto.Id }, sessionDto);
    }

    // DELETE: api/Sessions/5
    [HttpDelete("{id}")]
    public async Task<ActionResult<SessionDto>> DeleteSession(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var sessionDto = await _context.Sessions.Select(SessionDto.AsSessionDto).SingleOrDefaultAsync(m => m.Id == id);
       
        if (sessionDto == null)
        {
            return NotFound();
        }

        // var session = SessionDto.AsSessionFunc(sessionDto);

        // _context.Sessions.Remove(session);

        // await SaveChangesAndRemoveCacheAsync(CacheKeys.Session);
        try
        {
            var deleted = await sessionService.DeleteSessionAsync(sessionDto);

            if (deleted)
            {
                this.RemoveCache(CacheKeys.Session);
            }
            else
            {
                return BadRequest("Delete failed!.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }  

        return sessionDto;
    }

    private bool SessionExists(int id)
    {
        return _context.Sessions.Any(e => e.Id == id);
    }

	
	// GET: api/Sessions/Cache
    [AllowAnonymous]
    [HttpGet("Cache")]
    public IEnumerable<SessionCache> GetCacheSessions()
    {
        return this.CacheSessions();
    }
    
    
}

[Route("api2/[controller]")]    
[ApiController]
// [Produces("application/json")]
// [Route("api/Students")]    
// [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
[Authorize]
public partial class StudentsController : ApiController
{
    StudentService studentService;

    public StudentsController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, StudentService studentService) : base(context, env, memoryCache)
    {
        this.studentService = studentService;
    }

    // GET: api/Students
    [HttpGet]
    public async Task<ActionResult<IEnumerable<StudentDto>>> GetStudents(string searchText = null
			, string matricNoText = null
			, string lastnameText = null
			, string firstnameText = null
			, string middlenameText = null
		/*, int pageNumber=1, int pageSize=7*/)
    {

        // var students = _context.Students.Select(StudentDto.AsStudentDto);
        List<Expression<Func<StudentDto, bool>>> filters = null; 

        if (String.IsNullOrEmpty(searchText)
			&& String.IsNullOrEmpty(matricNoText)
			&& String.IsNullOrEmpty(lastnameText)
			&& String.IsNullOrEmpty(firstnameText)
			&& String.IsNullOrEmpty(middlenameText)
		)
        {
            // return null;
        }
        else
        {
            filters = new List<Expression<Func<StudentDto, bool>>>(); 

		    if (!String.IsNullOrEmpty(searchText))
            {
			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
			    {
				    filters.Add(x => x.Id.ToString().Contains(searchText));
			    }
            }
		    if (!String.IsNullOrEmpty(matricNoText))
		    {
			    filters.Add(x => x.MatricNo == matricNoText);
		    }
		    if (!String.IsNullOrEmpty(lastnameText))
		    {
			    filters.Add(x => x.Lastname == lastnameText);
		    }
		    if (!String.IsNullOrEmpty(firstnameText))
		    {
			    filters.Add(x => x.Firstname == firstnameText);
		    }
		    if (!String.IsNullOrEmpty(middlenameText))
		    {
			    filters.Add(x => x.Middlename == middlenameText);
		    }
        }

        //sort
        //return students.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);

		// OnSelectQuery(ref students);

        // return await students.ToListAsync();

        if (filters == null)
        {
            return await studentService.GetStudentDtoesAsync(StudentDto.IncludeNavigations());
        }
        else
        {
            return await studentService.GetStudentDtoesAsync(StudentDto.IncludeNavigations(), filters.ToArray());
        }

    }

	partial void OnSelectQuery(ref IQueryable<StudentDto> students);


    // GET: api/Students/5
    [HttpGet("{id}")]
    public async Task<ActionResult<StudentDto>> GetStudent(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var student = await studentService.GetStudentDtoAsync(id, StudentDto.IncludeNavigations());

        if (student == null)
        {
            return NotFound();
        }

        return student;
    }

    // PUT: api/Students/5
    [HttpPut("{id}")]
	public async Task<IActionResult> PutStudent(int id, StudentDto student)
	{
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != student.Id)
        {
            return BadRequest();
        }

        try
        {

            var updated = await studentService.UpdateStudentAsync(student, User.Identity.Name);
            
            if (updated)
            {
                this.RemoveCache(CacheKeys.Student);
            }
            else
            {
                return BadRequest("Update failed!.");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StudentExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
		// return Ok(student);
    }

    // POST: api/Students
    [HttpPost]
    public async Task<ActionResult<StudentDto>> PostStudent(StudentDto student)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        StudentDto studentDto;
        try
        {
            
            studentDto = await studentService.CreateStudentAsync(student, User.Identity.Name);            
        
            if (studentDto != null)
            {
                this.RemoveCache(CacheKeys.Student);
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }   

        // var studentDto = await _context.Students.Select(StudentDto.AsStudentDto).SingleOrDefaultAsync(m => m.Id == student.Id);

        return CreatedAtAction("GetStudent", new { id = studentDto.Id }, studentDto);
    }

    // DELETE: api/Students/5
    [HttpDelete("{id}")]
    public async Task<ActionResult<StudentDto>> DeleteStudent(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var studentDto = await _context.Students.Select(StudentDto.AsStudentDto).SingleOrDefaultAsync(m => m.Id == id);
       
        if (studentDto == null)
        {
            return NotFound();
        }

        // var student = StudentDto.AsStudentFunc(studentDto);

        // _context.Students.Remove(student);

        // await SaveChangesAndRemoveCacheAsync(CacheKeys.Student);
        try
        {
            var deleted = await studentService.DeleteStudentAsync(studentDto);

            if (deleted)
            {
                this.RemoveCache(CacheKeys.Student);
            }
            else
            {
                return BadRequest("Delete failed!.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }  

        return studentDto;
    }

    private bool StudentExists(int id)
    {
        return _context.Students.Any(e => e.Id == id);
    }

	
	// GET: api/Students/Cache
    [AllowAnonymous]
    [HttpGet("Cache")]
    public IEnumerable<StudentCache> GetCacheStudents()
    {
        return this.CacheStudents();
    }
    
    
}

[Route("api2/[controller]")]    
[ApiController]
// [Produces("application/json")]
// [Route("api/StudentCourses")]    
// [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
[Authorize]
public partial class StudentCoursesController : ApiController
{
    StudentCourseService studentCourseService;

    public StudentCoursesController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, StudentCourseService studentCourseService) : base(context, env, memoryCache)
    {
        this.studentCourseService = studentCourseService;
    }

    // GET: api/StudentCourses
    [HttpGet]
    public async Task<ActionResult<IEnumerable<StudentCourseDto>>> GetStudentCourses(string searchText = null
            // +
			, int? sessionId = null
			, string sessionText = null
           
            // -
            // +
			, int? semesterId = null
			, string semesterText = null
           
            // -
            // +
			, int? studentId = null
			, string studentText = null
           
            // -
            // +
			, int? courseId = null
			, string courseText = null
           
            // -
			, double? scoreText = null
		/*, int pageNumber=1, int pageSize=7*/)
    {

        // var studentCourses = _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto);
        List<Expression<Func<StudentCourseDto, bool>>> filters = null; 

        if (String.IsNullOrEmpty(searchText)
            // +
			&& (sessionId is null)
			&& String.IsNullOrEmpty(sessionText)
            // -
            // +
			&& (semesterId is null)
			&& String.IsNullOrEmpty(semesterText)
            // -
            // +
			&& (studentId is null)
			&& String.IsNullOrEmpty(studentText)
            // -
            // +
			&& (courseId is null)
			&& String.IsNullOrEmpty(courseText)
            // -
			&& scoreText == null
		)
        {
            // return null;
        }
        else
        {
            filters = new List<Expression<Func<StudentCourseDto, bool>>>(); 

		    if (!String.IsNullOrEmpty(searchText))
            {
			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
			    {
				    filters.Add(x => x.Id.ToString().Contains(searchText));
			    }
            }
            // +
		    if (!(sessionId is null))
		    {
			    filters.Add(x => x.SessionId == sessionId);
		    }
		    if (!String.IsNullOrEmpty(sessionText))
		    {
			    filters.Add(x => x.SessionName == sessionText);
		    }
            
            // -
            // +
		    if (!(semesterId is null))
		    {
			    filters.Add(x => x.SemesterId == semesterId);
		    }
		    if (!String.IsNullOrEmpty(semesterText))
		    {
			    filters.Add(x => x.SemesterName == semesterText);
		    }
            
            // -
            // +
		    if (!(studentId is null))
		    {
			    filters.Add(x => x.StudentId == studentId);
		    }
		    if (!String.IsNullOrEmpty(studentText))
		    {
			    filters.Add(x => x.StudentMatricNo == studentText);
		    }
            
            // -
            // +
		    if (!(courseId is null))
		    {
			    filters.Add(x => x.CourseId == courseId);
		    }
		    if (!String.IsNullOrEmpty(courseText))
		    {
			    filters.Add(x => x.CourseCode == courseText);
		    }
            
            // -
		    if (scoreText != null)
		    {
			    filters.Add(x => x.Score == scoreText);
		    }
        }

        //sort
        //return studentCourses.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);

		// OnSelectQuery(ref studentCourses);

        // return await studentCourses.ToListAsync();

        if (filters == null)
        {
            return await studentCourseService.GetStudentCourseDtoesAsync(StudentCourseDto.IncludeNavigations());
        }
        else
        {
            return await studentCourseService.GetStudentCourseDtoesAsync(StudentCourseDto.IncludeNavigations(), filters.ToArray());
        }

    }

	partial void OnSelectQuery(ref IQueryable<StudentCourseDto> studentCourses);


    // GET: api/StudentCourses/5
    [HttpGet("{id}")]
    public async Task<ActionResult<StudentCourseDto>> GetStudentCourse(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var studentCourse = await studentCourseService.GetStudentCourseDtoAsync(id, StudentCourseDto.IncludeNavigations());

        if (studentCourse == null)
        {
            return NotFound();
        }

        return studentCourse;
    }

    // PUT: api/StudentCourses/5
    [HttpPut("{id}")]
	public async Task<IActionResult> PutStudentCourse(int id, StudentCourseDto studentCourse)
	{
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != studentCourse.Id)
        {
            return BadRequest();
        }

        try
        {

            var updated = await studentCourseService.UpdateStudentCourseAsync(studentCourse, User.Identity.Name);
            
            if (updated)
            {
                this.RemoveCache(CacheKeys.StudentCourse);
            }
            else
            {
                return BadRequest("Update failed!.");
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StudentCourseExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
		// return Ok(studentCourse);
    }

    // POST: api/StudentCourses
    [HttpPost]
    public async Task<ActionResult<StudentCourseDto>> PostStudentCourse(StudentCourseDto studentCourse)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        StudentCourseDto studentCourseDto;
        try
        {
            
            studentCourseDto = await studentCourseService.CreateStudentCourseAsync(studentCourse, User.Identity.Name);            
        
            if (studentCourseDto != null)
            {
                this.RemoveCache(CacheKeys.StudentCourse);
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }   

        // var studentCourseDto = await _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto).SingleOrDefaultAsync(m => m.Id == studentCourse.Id);

        return CreatedAtAction("GetStudentCourse", new { id = studentCourseDto.Id }, studentCourseDto);
    }

    // DELETE: api/StudentCourses/5
    [HttpDelete("{id}")]
    public async Task<ActionResult<StudentCourseDto>> DeleteStudentCourse(int id)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var studentCourseDto = await _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto).SingleOrDefaultAsync(m => m.Id == id);
       
        if (studentCourseDto == null)
        {
            return NotFound();
        }

        // var studentCourse = StudentCourseDto.AsStudentCourseFunc(studentCourseDto);

        // _context.StudentCourses.Remove(studentCourse);

        // await SaveChangesAndRemoveCacheAsync(CacheKeys.StudentCourse);
        try
        {
            var deleted = await studentCourseService.DeleteStudentCourseAsync(studentCourseDto);

            if (deleted)
            {
                this.RemoveCache(CacheKeys.StudentCourse);
            }
            else
            {
                return BadRequest("Delete failed!.");
            }
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }  

        return studentCourseDto;
    }

    private bool StudentCourseExists(int id)
    {
        return _context.StudentCourses.Any(e => e.Id == id);
    }

	
	// GET: api/StudentCourses/Cache
    [AllowAnonymous]
    [HttpGet("Cache")]
    public IEnumerable<StudentCourseCache> GetCacheStudentCourses()
    {
        return this.CacheStudentCourses();
    }
    
    
}
