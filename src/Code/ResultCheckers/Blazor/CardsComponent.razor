<!--
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
-->

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject IApiService ApiSvc
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localize
@inject IMatToaster Toaster


<div id="cards-cmpt">
	<Overlay @ref="cardOverlay">
	@if (!string.IsNullOrWhiteSpace(error))
	{        
		<div class="overlay-error">@error</div>
	}
	</Overlay>

	<!-- AuthorizeView allows us to only show sections of the page -->
	<!-- based on the security on the current user -->
	<AuthorizeView>
		<!-- Show this section if the user is logged in -->
		<Authorized>

			<MatFAB Class="app-fab--absolute" Icon="@MatIconNames.Favorite"></MatFAB>

			@if (cards == null)
			{
				<Busy />
			}
			else
			{
				if (canAddCard)
				{
					<div class="new-area">
						<!-- Add a new card -->
						<MatButton Unelevated="true" @onclick="AddNewCard" title="@(Localize["Add New Card"])">@Localize["Add New Card"]</MatButton>
					</div>
				}

				if (canViewCard && cards.Count() > 0)
				{
					<CardList Cards=@cards 
							IsAdmin=@isAdmin 
							CanUpdate=@canUpdateCard 
							OnSelectionChanged=@SelectionChangedEvent 
							OnEdit=@EditCard 
					/>
				}
			}

			@if (showPopup)
			{
				<div>
					<CardEditDialog FormData=@formData 
							DialogIsOpen=@dialogIsOpen 
							OnSave=@SaveCard 
							OnDelete=@DeleteCard
							OnCancel=@CancelCard
							CanView=@canViewCard 
							CanAdd=@canAddCard 
							CanUpdate=@canUpdateCard 
							CanDelete=@canDeleteCard
					/>
				</div>
			}
	
		<!-- +navigations -->
		<!-- -navigations -->

		</Authorized>
		<!-- Show this section if the user is not logged in -->
		<NotAuthorized>
			<p>You're not signed in.</p>
		</NotAuthorized>
	</AuthorizeView>

	<SnackBarMessage @ref="snackBarAdded" IsOpen="isAdded" Message="@(Localize["Congratualtions New Card Added Successfully"])" />
	<SnackBarMessage @ref="snackBarUpdated" IsOpen="isUpdated" Message="@(Localize["Wow! a Card Updated Successfully"])" />
	<SnackBarMessage @ref="snackBarDeleted" IsOpen="isDeleted" Message="@(Localize["Eh! you deleted a Card"])" />
</div>

@code {
    string apiRootUrl = "/api1";

	Overlay cardOverlay;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private System.Security.Claims.ClaimsPrincipal User;

    bool isOwner;
    bool isAdmin;
	bool isManager;
    bool isTeacher;
    bool canViewCard, canAddCard, canUpdateCard, canDeleteCard;

    bool isAdded, isUpdated, isDeleted;
	bool showTracker;

    bool dialogIsOpen = false;
    CardDto dialogData = null;

    string toastMessage;
	string error;

    SnackBarMessage snackBarAdded;
    SnackBarMessage snackBarUpdated;
    SnackBarMessage snackBarDeleted;

    // Stores the cards displayed in a list
    private CardDto[] cards;
    // Stores a single card
    CardDto formData = new CardDto();
    // Controls if the popup is displayed
    bool showPopup = false;
    
    public string ReturnUrl
    {
        get
        {
            return NavigationManager.Uri.Replace(NavigationManager.BaseUri, "/");
        }
    }

	
    // First method to run when user navicates to this control
    protected override async Task OnInitializedAsync()
    {
		// Get the current user
        var authState = await authenticationStateTask;
        User = authState.User;

        var username = User.Identity.IsAuthenticated ? User.Identity.Name : "Anoymous";

		isOwner = username == "a1@ark.com";

		isAdmin = User.IsInRole("Administrators") || isOwner;
        isManager = User.IsInRole("Managers") || User.IsInRole("Administrators")  || isOwner;
        isTeacher = User.IsInRole("Teachers") || User.IsInRole("Managers") || User.IsInRole("Administrators")  || isOwner;
                    

		canViewCard = canAddCard = canUpdateCard = canDeleteCard = isAdmin;
		canViewCard = canAddCard = canUpdateCard = isManager;
		canViewCard = canAddCard = isTeacher;

        if (User.Identity != null)
        {
            try
            {
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }

            await Search();
        }
    }

	async Task Search()
	{
		if (User.Identity.IsAuthenticated)
        {
            // Make a call to get the cards
            // we don't pass the user because the server
            // side code will determine who the user is
            // from the authentication cookie

            try
            {
                cards = await ApiSvc.GetAsync<CardDto[]>(apiRootUrl + "/Cards");

				//
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
	}

    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selectedCard = (CardDto)row;
			EditCard(selectedCard);
        }
		this.StateHasChanged();
    }

    void AddNewCard()
    {
        // Make new card
        formData = new CardDto {
						// Set Id to 0 so we know it is a new record
						Id = 0
					};

        OpenDialog();

        // this.StateHasChanged();
    }

    void EditCard(CardDto card)
    {
        // Set the selected card
        // as the current card
        formData = card;
        // Open the Popup
        OpenDialog();
    }

    async Task SaveCard()
    {
		error = null;
        
		// Close the Popup
        CloseDialog();
        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new card will have the Id set to 0
        if (formData.Id == 0)
        {
			try
			{
				// Create new card
				// Card objNewCard = CardDto.AsCardFunc(formData);

				// Save the result
				var resp = await ApiSvc.AddAsync(apiRootUrl + "/Cards", formData);

				isAdded = true;
				snackBarAdded.Show();

				toastMessage = ($"Card '{formData.Id}' added successfully");
				Toaster.Add(toastMessage, MatToastType.Info);
			}
            catch (Exception ex)
            {
                error = ex.Message;
                cardOverlay.Show();
            }
        }
        else
        {
			try
			{
				// This is an update
				var resp = await ApiSvc.UpdateAsync(apiRootUrl + "/Cards/" + Convert.ToInt32(formData.Id), formData);

				isUpdated = true;
				snackBarUpdated.Show();

				toastMessage = ($"Card '{formData.Id}' updated successfully");
				Toaster.Add(toastMessage, MatToastType.Success);
			}
            catch (Exception ex)
            {
                error = ex.Message;
                cardOverlay.Show();
            }
        }

        // Get the cards for the current user
        await Search();

        toastMessage = ($"Cards record refreshed");
        Toaster.Add(toastMessage, MatToastType.Info);
    }

    async Task DeleteCard()
    {
		error = null;
		try
		{
			// Close the Popup
			CloseDialog();
			// Delete the card
			var resp = await ApiSvc.DeleteAsync<Card>(apiRootUrl + "/Cards/" + Convert.ToInt32(formData.Id));

			isDeleted = true;
			snackBarDeleted.Show();


			// Get the cards for the current user
			await Search();

			toastMessage = ($"Card '{formData.Id}' deleted successfully");
			Toaster.Add(toastMessage, MatToastType.Danger);
		}
        catch (Exception ex)
        {
            error = ex.Message;
            cardOverlay.Show();
        }
    }

    void CancelCard()
    {
        CloseDialog();
    }

    void OpenDialog()
    {
        // Open the Popup
        showPopup = true;
        dialogData = null;
        dialogIsOpen = true;
    }

    void CloseDialog()
    {
        // close the Popup
        showPopup = false;
        dialogIsOpen = false;
    }




}

