<!--
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
-->

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject IApiService ApiSvc
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localize
@inject IMatToaster Toaster


	<div>
		<EditForm Model="@FormData" OnValidSubmit="@SaveStudentCourse" Context="StudentCourseEditContext">
			<MatDialog @bind-IsOpen="@DialogIsOpen">
                <MatDialogTitle>@Localize["Student Course Edit"] </MatDialogTitle>
                <MatDialogContent>

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
				<!-- SessionId | isForeignKey(True) | Nullable<int> | 00 -->
				<!-- Foreign Key Session -->
					<div class="mat-layout-grid-cell-span-12">
						<MatSelectValue Label="@(Localize["Session"])" @bind-Value="FormData.SessionId" Items="@SessionCaches" ValueSelector="@(i=>i.Id)" FullWidth="true">
							<ItemTemplate Context="session">
								<span>@session?.Name</span>
							</ItemTemplate>
						</MatSelectValue>
						<ValidationMessage For="@(() => FormData.SessionId)" />
						@if(CanAddSession)
						{
						<!-- Add a new session -->
						<MatButton Unelevated="true" @onclick="AddNewSession" 
								title="@(Localize["Add New Session"])">
								@Localize["Add New Session"]
						</MatButton>
						}
					</div>
				<!-- SemesterId | isForeignKey(True) | Nullable<int> | 00 -->
				<!-- Foreign Key Semester -->
					<div class="mat-layout-grid-cell-span-12">
						<MatSelectValue Label="@(Localize["Semester"])" @bind-Value="FormData.SemesterId" Items="@SemesterCaches" ValueSelector="@(i=>i.Id)" FullWidth="true">
							<ItemTemplate Context="semester">
								<span>@semester?.Name</span>
							</ItemTemplate>
						</MatSelectValue>
						<ValidationMessage For="@(() => FormData.SemesterId)" />
						@if(CanAddSemester)
						{
						<!-- Add a new semester -->
						<MatButton Unelevated="true" @onclick="AddNewSemester" 
								title="@(Localize["Add New Semester"])">
								@Localize["Add New Semester"]
						</MatButton>
						}
					</div>
				<!-- StudentId | isForeignKey(True) | @int | 00 -->
				<!-- Foreign Key Student -->
					<div class="mat-layout-grid-cell-span-12">
						<MatSelectValue Label="@(Localize["Student"])" @bind-Value="FormData.StudentId" Items="@StudentCaches" ValueSelector="@(i=>i.Id)" FullWidth="true">
							<ItemTemplate Context="student">
								<span>@student?.Name</span>
							</ItemTemplate>
						</MatSelectValue>
						<ValidationMessage For="@(() => FormData.StudentId)" />
						@if(CanAddStudent)
						{
						<!-- Add a new student -->
						<MatButton Unelevated="true" @onclick="AddNewStudent" 
								title="@(Localize["Add New Student"])">
								@Localize["Add New Student"]
						</MatButton>
						}
					</div>
				<!-- CourseId | isForeignKey(True) | @int | 00 -->
				<!-- Foreign Key Course -->
					<div class="mat-layout-grid-cell-span-12">
						<MatSelectValue Label="@(Localize["Course"])" @bind-Value="FormData.CourseId" Items="@CourseCaches" ValueSelector="@(i=>i.Id)" FullWidth="true">
							<ItemTemplate Context="course">
								<span>@course?.Name</span>
							</ItemTemplate>
						</MatSelectValue>
						<ValidationMessage For="@(() => FormData.CourseId)" />
						@if(CanAddCourse)
						{
						<!-- Add a new course -->
						<MatButton Unelevated="true" @onclick="AddNewCourse" 
								title="@(Localize["Add New Course"])">
								@Localize["Add New Course"]
						</MatButton>
						}
					</div>
				<!-- Score | isForeignKey(False) | @double | 00 -->
							
					<div class="mat-layout-grid-cell-span-12">
						<MatNumericUpDownField  Label="@(Localize["Score"])" @bind-Value="FormData.Score" FullWidth="true" />
						<ValidationMessage For="@(() => FormData.Score)" />
					</div>

		<!-- ForeignKey StudentId | @int -->
		<!-- Student | Student | StudentId-->
		<!-- ForeignKey CourseId | @int -->
		<!-- Course | Course | CourseId-->
		<!-- ForeignKey SessionId | Nullable<int> -->
		<!-- Session | Session | SessionId-->
		<!-- ForeignKey SemesterId | Nullable<int> -->
		<!-- Semester | Semester | SemesterId-->
						<div class="mat-layout-grid-cell-span-12">
							<MatSlideToggle Label="Tracker"  @bind-Value="@showTracker"></MatSlideToggle>
							@if (showTracker)
							{
								<fieldset disabled>
									<TrackerDto Model="FormData" />
								</fieldset>
							}
						</div>
					</div>
				</div>

			</MatDialogContent>
                <MatDialogActions>
                    <MatButton Type="button" OnClick=@CancelStudentCourse>@Localize["CANCEL"]</MatButton>
                    @if(CanAdd || CanUpdate)
					{
					<!-- Button to save the product -->
                    <MatButton Type="submit" title="@(Localize["Save Student Course"])">@Localize["SAVE"]</MatButton>
                    }
					<!-- Only show button if not a new record -->
                    @if (FormData.Id > 0 && CanDelete)
                    {
                        <!-- Button to delete the product -->
                        <MatButton Type="button" OnClick=@DeleteStudentCourse Icon="@MatIconNames.Restore_from_trash" title="Delete Student Course">DELETE</MatButton>
                    }

                </MatDialogActions>
            </MatDialog>
		</EditForm>
				
	</div>

@code {
    
    
    [Parameter] public StudentCourseDto FormData { get; set; } = new StudentCourseDto();
    [Parameter] public bool DialogIsOpen { get; set; }
    [Parameter] public bool CanView { get; set; } = true;
    [Parameter] public bool CanAdd { get; set; }
    [Parameter] public bool CanUpdate { get; set; }
    [Parameter] public bool CanDelete { get; set; }

    bool showTracker;

	// <!-- ForeignKey StudentId | @int -->
	// <!-- Student | Student |  -->
	[Parameter] public StudentCache[] StudentCaches { get; set; }	
	
	[Parameter] public bool CanAddStudent { get; set; }
	[Parameter] public EventCallback OnAddNewStudent { get; set; }
	void AddNewStudent()
	{
		OnAddNewStudent.InvokeAsync(null);
	}
	// <!-- ForeignKey CourseId | @int -->
	// <!-- Course | Course |  -->
	[Parameter] public CourseCache[] CourseCaches { get; set; }	
	
	[Parameter] public bool CanAddCourse { get; set; }
	[Parameter] public EventCallback OnAddNewCourse { get; set; }
	void AddNewCourse()
	{
		OnAddNewCourse.InvokeAsync(null);
	}
	// <!-- ForeignKey SessionId | Nullable<int> -->
	// <!-- Session | Session | Nullable -->
	[Parameter] public SessionCache[] SessionCaches { get; set; }	
	
	[Parameter] public bool CanAddSession { get; set; }
	[Parameter] public EventCallback OnAddNewSession { get; set; }
	void AddNewSession()
	{
		OnAddNewSession.InvokeAsync(null);
	}
	// <!-- ForeignKey SemesterId | Nullable<int> -->
	// <!-- Semester | Semester | Nullable -->
	[Parameter] public SemesterCache[] SemesterCaches { get; set; }	
	
	[Parameter] public bool CanAddSemester { get; set; }
	[Parameter] public EventCallback OnAddNewSemester { get; set; }
	void AddNewSemester()
	{
		OnAddNewSemester.InvokeAsync(null);
	}
	
    [Parameter] public EventCallback<StudentCourseDto> OnSave { get; set; }
    [Parameter] public EventCallback<StudentCourseDto> OnDelete { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }


    void SaveStudentCourse()
    {
        OnSave.InvokeAsync(FormData);
    }

    void DeleteStudentCourse()
    {
        OnDelete.InvokeAsync(FormData);
    }

    void CancelStudentCourse()
    {
        OnCancel.InvokeAsync(null);
    }

}

