<!--
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
-->

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject IApiService ApiSvc
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localize
@inject IMatToaster Toaster


	<div>
		<EditForm Model="@FormData" OnValidSubmit="@SaveGrade" Context="GradeEditContext">
			<MatDialog @bind-IsOpen="@DialogIsOpen">
                <MatDialogTitle>@Localize["Grade Edit"] </MatDialogTitle>
                <MatDialogContent>

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
                            <div class="mat-layout-grid-cell-span-12">
								<MatTextField Label="Name" @bind-Value="FormData.Name" FullWidth="true" />
							</div>
				<!-- BeginMark | isForeignKey(False) | @double | 00 -->
							
					<div class="mat-layout-grid-cell-span-12">
						<MatNumericUpDownField  Label="@(Localize["Begin Mark"])" @bind-Value="FormData.BeginMark" FullWidth="true" />
						<ValidationMessage For="@(() => FormData.BeginMark)" />
					</div>
				<!-- NextBeginMark | isForeignKey(False) | @double | 00 -->
							
					<div class="mat-layout-grid-cell-span-12">
						<MatNumericUpDownField  Label="@(Localize["Next Begin Mark"])" @bind-Value="FormData.NextBeginMark" FullWidth="true" />
						<ValidationMessage For="@(() => FormData.NextBeginMark)" />
					</div>
				<!-- Point | isForeignKey(False) | @double | 00 -->
							
					<div class="mat-layout-grid-cell-span-12">
						<MatNumericUpDownField  Label="@(Localize["Point"])" @bind-Value="FormData.Point" FullWidth="true" />
						<ValidationMessage For="@(() => FormData.Point)" />
					</div>
						<div class="mat-layout-grid-cell-span-12">
							<MatSlideToggle Label="Tracker"  @bind-Value="@showTracker"></MatSlideToggle>
							@if (showTracker)
							{
								<fieldset disabled>
									<TrackerDto Model="FormData" />
								</fieldset>
							}
						</div>
					</div>
				</div>

			</MatDialogContent>
                <MatDialogActions>
                    <MatButton Type="button" OnClick=@CancelGrade>@Localize["CANCEL"]</MatButton>
                    @if(CanAdd || CanUpdate)
					{
					<!-- Button to save the product -->
                    <MatButton Type="submit" title="@(Localize["Save Grade"])">@Localize["SAVE"]</MatButton>
                    }
					<!-- Only show button if not a new record -->
                    @if (FormData.Id > 0 && CanDelete)
                    {
                        <!-- Button to delete the product -->
                        <MatButton Type="button" OnClick=@DeleteGrade Icon="@MatIconNames.Restore_from_trash" title="Delete Grade">DELETE</MatButton>
                    }

                </MatDialogActions>
            </MatDialog>
		</EditForm>
				
	</div>

@code {
    
    
    [Parameter] public GradeDto FormData { get; set; } = new GradeDto();
    [Parameter] public bool DialogIsOpen { get; set; }
    [Parameter] public bool CanView { get; set; } = true;
    [Parameter] public bool CanAdd { get; set; }
    [Parameter] public bool CanUpdate { get; set; }
    [Parameter] public bool CanDelete { get; set; }

    bool showTracker;

	
    [Parameter] public EventCallback<GradeDto> OnSave { get; set; }
    [Parameter] public EventCallback<GradeDto> OnDelete { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }


    void SaveGrade()
    {
        OnSave.InvokeAsync(FormData);
    }

    void DeleteGrade()
    {
        OnDelete.InvokeAsync(FormData);
    }

    void CancelGrade()
    {
        OnCancel.InvokeAsync(null);
    }

}

