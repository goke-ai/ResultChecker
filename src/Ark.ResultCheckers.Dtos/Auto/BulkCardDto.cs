//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ark.ResultCheckers.Dtos
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Linq.Expressions;
    using Ark.ResultCheckers.Entities;
    
    public partial class BulkCardDto : BulkEntityDto
    {
        public BulkCardDto()
        {
            this.Role = "\"Users\"";
    		
            OnInitialize();
        }
    
        partial void OnInitialize();
    
        [Required(ErrorMessage = "The Pin is a mandatory Field.")]
    	[Display(Name = "Pin")]
    	public string Pin { get; set; }
        [Display(Name = "Owner")]
    	public string Owner { get; set; }
        [Required(ErrorMessage = "The Role is a mandatory Field.")]
    	[Display(Name = "Role")]
    	public string Role { get; set; }
        [Required(ErrorMessage = "The Username is a mandatory Field.")]
    	[Display(Name = "Username")]
    	public string Username { get; set; }
    	private static Expression<Func<BulkCard, BulkCardDto>> _asBulkCardDto;
        public static Expression<Func<BulkCard, BulkCardDto>> AsBulkCardDto
        {
            get
            {
                SetConverters();
                return _asBulkCardDto;
            }
        }
        
        private static Func<BulkCard, BulkCardDto> _asBulkCardDtoFunc;
        public static Func<BulkCard, BulkCardDto> AsBulkCardDtoFunc
        {
            get
            {
                SetConverters();
                return _asBulkCardDtoFunc;
            }
        }
        
        private static Expression<Func<BulkCardDto, BulkCard>> _asBulkCard;
        public static Expression<Func<BulkCardDto, BulkCard>> AsBulkCard
        {
            get
            {
                SetConverters();
                return _asBulkCard;
            }
        }
        
        private static Func<BulkCardDto, BulkCard> _asBulkCardFunc;
        public static Func<BulkCardDto, BulkCard> AsBulkCardFunc
        {
            get
            {
                SetConverters();
                return _asBulkCardFunc;
            }
        }
    
    	private static Func<BulkCard, BulkCardDto, BulkCard> _toBulkCardFunc;
        public static Func<BulkCard, BulkCardDto, BulkCard> ToBulkCardFunc
        {
            get
            {
                SetConverters();
                return _toBulkCardFunc;
            }
        }
    
    	/*
    	private static Expression<Func<BulkCard, string>> _orderBulkCard;
        public static Expression<Func<BulkCard, string>> OrderBulkCard
        {
            get
            {
                SetConverters();
                return _orderBulkCard;
            }
        }
    	*/
    
    	private static Expression<Func<BulkCard, bool>> SearchExpression(string searchString)
        {
            return 
    				w => w.Id.ToString().Contains(searchString) 
    			|| w.Pin.Contains(searchString) //@string
    			|| w.Owner.Contains(searchString) //@string
    			|| w.Role.Contains(searchString) //@string
    			|| w.Username.Contains(searchString) //@string
    			;
        }
    
        static IQueryable<BulkCard> _searchQuery;
        public static IQueryable<BulkCard> Search(IQueryable<BulkCard> query, string searchString)
        {
            _searchQuery = query.Where(
    						SearchExpression(searchString)
    					);
    		OnSetSearchQuery(query, searchString);
    		return _searchQuery;
    	}
    
        static IOrderedQueryable<BulkCard> _orderQuery;
        public static IOrderedQueryable<BulkCard> OrderBy(IQueryable<BulkCard> query)
        {
    		_orderQuery = query.OrderBy(o => o.Id);
    		OnSetOrderQuery(query);
            return _orderQuery;
        }
    
        static IOrderedQueryable<BulkCardDto> _orderQueryDto;
        public static IOrderedQueryable<BulkCardDto> OrderBy(IQueryable<BulkCardDto> query)
        {
    		_orderQueryDto = query.OrderBy(o => o.Id);
            OnSetOrderQuery(query);
            return _orderQueryDto;
        }
    
    	static string[] _includeNavigations;
        public static string[] IncludeNavigations()
        {
            _includeNavigations = new string[] { 
    		};
            OnSetIncludeNavigations();
            return _includeNavigations;
        }
    
        static Expression<Func<BulkCard, bool>>[] _filters;
        public static Expression<Func<BulkCard, bool>>[] Filters(string searchString)
        {
            _filters = new Expression<Func<BulkCard, bool>>[]
    					   {
    							SearchExpression(searchString)
    
    					   };
            OnSetFilters(searchString);
            return _filters;
        }
    
    
    	private static void SetConverters()
        {
            _asBulkCardDto = x => new BulkCardDto
            {
                
                Id = x.Id,
                
                // UserName = x.UserName,
    			// +simplex
    			Pin = x.Pin,
    			Owner = x.Owner,
    			Role = x.Role,
    			Username = x.Username,
            };
    
            _asBulkCard = x => new BulkCard
            {
                
                Id = x.Id,
                
                // UserName = x.UserName,
    			// +simple
    			Pin = x.Pin,
    			Owner = x.Owner,
    			Role = x.Role,
    			Username = x.Username,
                 
            };
    
            _toBulkCardFunc = (y,x) => {
                
                y.Id = x.Id;
                
                // y.UserName = x.UserName;
    			// +simple
    			y.Pin = x.Pin;
    			y.Owner = x.Owner;
    			y.Role = x.Role;
    			y.Username = x.Username;
          
    			return y;
            };
    
            OnSetConverters();
    
            _asBulkCardFunc = _asBulkCard.Compile();
            _asBulkCardDtoFunc = _asBulkCardDto.Compile();
        }
    
        static partial void OnSetConverters();
        static partial void OnSetOrderQuery(IQueryable<BulkCard> query);
        static partial void OnSetOrderQuery(IQueryable<BulkCardDto> query);
        static partial void OnSetSearchQuery(IQueryable<BulkCard> query, string searchString);
        static partial void OnSetOrders();
        static partial void OnSetIncludeNavigations();
        static partial void OnSetFilters(string searchString);
    }
}
