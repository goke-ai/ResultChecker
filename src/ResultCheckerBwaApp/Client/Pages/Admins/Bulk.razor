@page "/admins/bulk"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@*@attribute [Authorize(Roles = "Administrators")]*@

@inject HttpClient Http
@inject IApiService ApiSvc
@inject IStringLocalizer<App> Localize

<div>
    <Overlay @ref="overlay">
        @if (!string.IsNullOrWhiteSpace(error))
        {
            <div class="overlay-error">@error</div>
        }
    </Overlay>
    <h1>Bulk</h1>

    <p>
        <InputFile OnChange="@OnInputFileChange" multiple />
    </p>

    @if (imageDataUrls.Count > 0)
    {
        <h4>Images</h4>

        <div class="card" style="width:30rem;">
            <div class="card-body">
                @foreach (var imageDataUrl in imageDataUrls)
                {
                    <img class="rounded m-1" src="@imageDataUrl" />
                }
            </div>
        </div>
    }

    <hr />

    <p>
        <InputFile OnChange="@OnFileSave" accept="application/csv" />
    </p>

    <p>@Message</p>

    <div class="row">
        @foreach (var record in SampleRecords)
        {
            <div class="col">

                <table class="excel">
                    <tbody>

                        @foreach (var row in record)
                        {
                            <tr>
                                @foreach (var cell in row)
                                {
                                    <td>@cell</td>
                                }
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        }
    </div>
    <div class="row">
        <div class="col">
            <table class="excel">
                <tbody>
                    @foreach (var row in dataList)
                    {
                        <tr>
                            @foreach (var cell in row)
                            {
                                <td>@cell</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <hr />
    <button @onclick="OnBulk">Post</button>

</div>


@code {

        Overlay overlay;

        string error = null;

    private IList<string> imageDataUrls = new List<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 3;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,
                100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
        }
    }


    List<string[]> dataList = new List<string[]>();
    List<double[][]> SampleRecords = new List<double[][]>();
    List<string> labels = new List<string>();

    List<BulkStudentCourseDto> bulkStudentCourseDtos = new List<BulkStudentCourseDto>();

    string Message;

    private async Task OnFileSave(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            var file = e.File;

            Message = "Reading file...";
            this.StateHasChanged();

            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            Message = "Parsing file...";
            this.StateHasChanged();
            using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(buffer))
            using (var reader = new System.IO.StreamReader(memoryStream))
            {
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    var cells = line.Split(',');

                    dataList.Add(cells);

                    if (float.TryParse(cells[4], out var score))
                    {

                        var bulk = new BulkStudentCourseDto
                        {
                            Session = cells[0],
                            Semester = cells[1],
                            Code = cells[2],
                            MatricNo = cells[3],
                            Score = score,
                            Username = cells[5]

                        };
                        bulkStudentCourseDtos.Add(bulk);
                    }
                }
            }

            this.StateHasChanged();
            Message = "Done.";
        }
    }

    async Task OnBulk()
    {
        try
        {
            // Create new session
            // Session objNewSession = SessionDto.AsSessionFunc(formData);


            // Save the result
            var resp = await ApiSvc.AddAsync("api2/Bulks/StudentCourses", bulkStudentCourseDtos);

            //isAdded = true;
            //message = ($"Session '{formData.Id}' added successfully");
            //showInfo(message, "added");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            overlay.Show();
        }
    }
}