<!--
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
-->

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]

@inject HttpClient Http
@inject IApiService ApiSvc
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localize
@inject IMatToaster Toaster


<div id="student-results-cmpt">
    <Overlay @ref="studentCourseOverlay">
        @if (!string.IsNullOrWhiteSpace(error))
        {
            <div class="overlay-error">@error</div>
        }
    </Overlay>

    <MatFAB Class="app-fab--absolute" Icon="@MatIconNames.Favorite"></MatFAB>

    @if (studentCourses == null)
    {
        <Busy />
    }
    else
    {
        <div class="search-area">
            <div>
                <EditForm Model="@searchFormData" OnValidSubmit="@OnSearch">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
                            <!-- SessionId | isForeignKey(True) | Nullable<int> | 00 -->
                            <!-- Foreign Key Session -->
                            <div class="mat-layout-grid-cell-span-12">
                                <MatSelectValue Label="@(Localize["Session"])" @bind-Value="searchFormData.SessionId" Items="@sessionCaches" ValueSelector="@(i=>i.Id)" FullWidth="false">
                                    <ItemTemplate Context="session">
                                        <span>@session?.Name</span>
                                    </ItemTemplate>
                                </MatSelectValue>
                                <ValidationMessage For="@(() => searchFormData.SessionId)" />
                            </div>
                            <!-- SemesterId | isForeignKey(True) | Nullable<int> | 00 -->
                            <!-- Foreign Key Semester -->
                            <div class="mat-layout-grid-cell-span-12">
                                <MatSelectValue Label="@(Localize["Semester"])" @bind-Value="searchFormData.SemesterId" Items="@semesterCaches" ValueSelector="@(i=>i.Id)" FullWidth="false">
                                    <ItemTemplate Context="semester">
                                        <span>@semester?.Name</span>
                                    </ItemTemplate>
                                </MatSelectValue>
                                <ValidationMessage For="@(() => searchFormData.SemesterId)" />
                            </div>
                            <!-- StudentId | isForeignKey(True) | @int | 00 -->
                            <!-- Foreign Key Student -->
                            <div class="mat-layout-grid-cell-span-12">
                                <MatSelectValue Label="@(Localize["Student"])" @bind-Value="searchFormData.StudentId" Items="@studentCaches" ValueSelector="@(i=>i.Id)" FullWidth="false">
                                    <ItemTemplate Context="student">
                                        <span>@student?.Name</span>
                                    </ItemTemplate>
                                </MatSelectValue>
                                <ValidationMessage For="@(() => searchFormData.StudentId)" />
                            </div>
                            <div class="mat-layout-grid-cell-span-12">
                                <!-- Search -->
                                <MatButton Type="submit" Raised="true" Icon="@MatIconNames.Search" title="@(Localize["Search"])">@(Localize["Search"])</MatButton>

                            </div>

                        </div>
                    </div>
                    
                </EditForm>
            </div>

        </div>

        <div class="grid-area">
            @if (canViewStudentCourse && studentCourses.Count() > 0)
            {
                <StudentCourseList StudentCourses=@studentCourses
                                   IsAdmin=@isAdmin
                                   CanUpdate=@canUpdateStudentCourse
                                   OnSelectionChanged=@SelectionChangedEvent
                                   OnEdit=@EditStudentCourse />
            }
        </div>
    }




</div>

@code {
    string apiRootUrl = "/api1";

    Overlay studentCourseOverlay;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private System.Security.Claims.ClaimsPrincipal User;

    bool isOwner;
    bool isAdmin;
    bool isExamOfficer;
    bool isTeacher;
    bool canViewStudentCourse, canAddStudentCourse, canUpdateStudentCourse, canDeleteStudentCourse;

    bool isAdded, isUpdated, isDeleted;
    bool showTracker;

    bool dialogIsOpen = false;
    StudentCourseDto dialogData = null;

    string toastMessage;
    string error;

    SnackBarMessage snackBarAdded;
    SnackBarMessage snackBarUpdated;
    SnackBarMessage snackBarDeleted;

    SearchStudentResultModel searchFormData = new SearchStudentResultModel();
    // Stores the studentCourses displayed in a list
    private StudentCourseDto[] studentCourses;
    // Stores a single studentCourse
    StudentCourseDto formData = new StudentCourseDto();
    // Controls if the popup is displayed
    bool showPopup = false;

    public string ReturnUrl
    {
        get
        {
            return NavigationManager.Uri.Replace(NavigationManager.BaseUri, "/");
        }
    }

    // <!-- ForeignKey StudentId | @int -->
    // <!-- Student | Student |  -->
    private StudentCache[] studentCaches { get; set; }

    // <!-- ForeignKey CourseId | @int -->
    // <!-- Course | Course |  -->
    private CourseCache[] courseCaches { get; set; }

    // <!-- ForeignKey SessionId | Nullable<int> -->
    // <!-- Session | Session | Nullable -->
    private SessionCache[] sessionCaches { get; set; }

    // <!-- ForeignKey SemesterId | Nullable<int> -->
    // <!-- Semester | Semester | Nullable -->
    private SemesterCache[] semesterCaches { get; set; }


    // First method to run when user navicates to this control
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var authState = await authenticationStateTask;
        User = authState.User;

        var username = User.Identity.IsAuthenticated ? User.Identity.Name : "Anoymous";

        isOwner = username == "a1@ark.com";

        isAdmin = User.IsInRole("Administrators") || isOwner;
        isExamOfficer = User.IsInRole("ExamOfficers") || User.IsInRole("Administrators") || isOwner;
        // isTeacher = User.IsInRole("Teachers") || User.IsInRole("ExamOfficers") || User.IsInRole("Administrators")  || isOwner;

        if (isAdmin)
        {
            canViewStudentCourse = canAddStudentCourse = canUpdateStudentCourse = canDeleteStudentCourse = isAdmin;
        }
        else if (isExamOfficer)
        {
            canViewStudentCourse = canAddStudentCourse = canUpdateStudentCourse = isExamOfficer;
        }
        else
        {
            canViewStudentCourse = true;


        }

        if (User.Identity != null)
        {
            try
            {
                // <!-- ForeignKey StudentId | @int -->
                // <!-- Student | Student -->
                studentCaches = await ApiSvc.GetAsync<StudentCache[]>(apiRootUrl + "/Caches/Students");
                // <!-- ForeignKey CourseId | @int -->
                // <!-- Course | Course -->
                courseCaches = await ApiSvc.GetAsync<CourseCache[]>(apiRootUrl + "/Caches/Courses");
                // <!-- ForeignKey SessionId | Nullable<int> -->
                // <!-- Session | Session -->
                sessionCaches = await ApiSvc.GetAsync<SessionCache[]>(apiRootUrl + "/Caches/Sessions");
                // <!-- ForeignKey SemesterId | Nullable<int> -->
                // <!-- Semester | Semester -->
                semesterCaches = await ApiSvc.GetAsync<SemesterCache[]>(apiRootUrl + "/Caches/Semesters");


                if (User.IsInRole("Students"))
                {
                    //var student = studentCaches.FirstOrDefault(f => f.Name.StartsWith($"{User.Identity.Name}-"));
                    //if (student != null)
                    //{
                    //    searchFormData.StudentId = student.Id;
                    //}

                    studentCaches = studentCaches.Where(w => w.Name.StartsWith($"{User.Identity.Name}-")).ToArray();
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }

            await Search();
        }
    }

    async Task OnSearch()
    {
        await Search();
    }

    async Task Search()
    {
        if (User.Identity.IsAuthenticated)
        {
            // Make a call to get the studentCourses
            // we don't pass the user because the server
            // side code will determine who the user is
            // from the authentication cookie

            try
            {
                studentCourses = await ApiSvc.GetAsync<StudentCourseDto[]>(apiRootUrl + $"/StudentCourses?sessionId={searchFormData.SessionId}" +
                    $"&semesterId={searchFormData.SemesterId}" +
                    $"&studentId={searchFormData.StudentId}");


            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    public void SelectionChangedEvent(object row)
    {
        if (row != null)
        {
            var selectedStudentCourse = (StudentCourseDto)row;
            EditStudentCourse(selectedStudentCourse);
        }
        this.StateHasChanged();
    }

    void AddNewStudentCourse()
    {
        // Make new studentCourse
        formData = new StudentCourseDto
        {
            // Set Id to 0 so we know it is a new record
            Id = 0
        };

        OpenDialog();

        // this.StateHasChanged();
    }

    void EditStudentCourse(StudentCourseDto studentCourse)
    {
        // Set the selected studentCourse
        // as the current studentCourse
        formData = studentCourse;
        // Open the Popup
        OpenDialog();
    }

    async Task SaveStudentCourse()
    {
        error = null;

        // Close the Popup
        CloseDialog();
        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new studentCourse will have the Id set to 0
        if (formData.Id == 0)
        {
            try
            {
                // Create new studentCourse
                // StudentCourse objNewStudentCourse = StudentCourseDto.AsStudentCourseFunc(formData);

                // Save the result
                var resp = await ApiSvc.AddAsync(apiRootUrl + "/StudentCourses", formData);

                isAdded = true;
                snackBarAdded.Show();

                toastMessage = ($"StudentCourse '{formData.Id}' added successfully");
                Toaster.Add(toastMessage, MatToastType.Info);
            }
            catch (Exception ex)
            {
                error = ex.Message;
                studentCourseOverlay.Show();
            }
        }
        else
        {
            try
            {
                // This is an update
                var resp = await ApiSvc.UpdateAsync(apiRootUrl + "/StudentCourses/" + Convert.ToInt32(formData.Id), formData);

                isUpdated = true;
                snackBarUpdated.Show();

                toastMessage = ($"StudentCourse '{formData.Id}' updated successfully");
                Toaster.Add(toastMessage, MatToastType.Success);
            }
            catch (Exception ex)
            {
                error = ex.Message;
                studentCourseOverlay.Show();
            }
        }

        // Get the studentCourses for the current user
        await Search();

        toastMessage = ($"StudentCourses record refreshed");
        Toaster.Add(toastMessage, MatToastType.Info);
    }

    async Task DeleteStudentCourse()
    {
        error = null;
        try
        {
            // Close the Popup
            CloseDialog();
            // Delete the studentCourse
            var resp = await ApiSvc.DeleteAsync<StudentCourse>(apiRootUrl + "/StudentCourses/" + Convert.ToInt32(formData.Id));

            isDeleted = true;
            snackBarDeleted.Show();


            // Get the studentCourses for the current user
            await Search();

            toastMessage = ($"StudentCourse '{formData.Id}' deleted successfully");
            Toaster.Add(toastMessage, MatToastType.Danger);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            studentCourseOverlay.Show();
        }
    }

    void CancelStudentCourse()
    {
        CloseDialog();
    }

    void OpenDialog()
    {
        // Open the Popup
        showPopup = true;
        dialogData = null;
        dialogIsOpen = true;
    }

    void CloseDialog()
    {
        // close the Popup
        showPopup = false;
        dialogIsOpen = false;
    }


}