<!--
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
-->

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject IApiService ApiSvc
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localize
@inject IMatToaster Toaster


	<div>
		<EditForm Model="@FormData" OnValidSubmit="@SaveAppSetting" Context="AppSettingEditContext">
			        <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
				<!-- Key | isForeignKey(False) | @string | 100 -->
					<div class="mat-layout-grid-cell-span-12">
							
						<MatTextField Label="@(Localize["Key"])" @bind-Value="FormData.Key" FullWidth="true" />
						<ValidationMessage For="@(() => FormData.Key)" />
					</div>
				<!-- Value | isForeignKey(False) | @string | 100 -->
					<div class="mat-layout-grid-cell-span-12">
							
						<MatTextField Label="@(Localize["Value"])" @bind-Value="FormData.Value" FullWidth="true" />
						<ValidationMessage For="@(() => FormData.Value)" />
					</div>
						<div class="mat-layout-grid-cell-span-12">
							<MatSlideToggle Label="Tracker"  @bind-Value="@showTracker"></MatSlideToggle>
							@if (showTracker)
							{
								<fieldset disabled>
									<TrackerDto Model="FormData" />
								</fieldset>
							}
						</div>
					</div>
				</div>

				<MatDivider></MatDivider>

			    <MatButton Type="button" OnClick="@(e => { DialogIsOpen = false; })">@Localize["CANCEL"]</MatButton>
                @if(CanAdd || CanUpdate)
				{
				<!-- Button to save the product -->
                <MatButton Type="submit" title="@(Localize["Save App Setting"])">@Localize["SAVE"]</MatButton>
                }
				<!-- Only show button if not a new record -->
                @if (FormData.Id > 0 && CanDelete)
                {
                    <!-- Button to delete the product -->
                    <MatButton Type="button" OnClick="DeleteAppSetting" Icon="@MatIconNames.Restore_from_trash" title="Delete App Setting">DELETE</MatButton>
                }

		</EditForm>
				
	</div>

@code {
    
    
    [Parameter] public AppSettingDto FormData { get; set; } = new AppSettingDto();
    [Parameter] public bool DialogIsOpen { get; set; }
    [Parameter] public bool CanView { get; set; } = true;
    [Parameter] public bool CanAdd { get; set; }
    [Parameter] public bool CanUpdate { get; set; }
    [Parameter] public bool CanDelete { get; set; }

    bool showTracker;

	
    [Parameter] public EventCallback<AppSettingDto> OnSaveAppSetting { get; set; }
    [Parameter] public EventCallback<AppSettingDto> OnDeleteAppSetting { get; set; }


    void SaveAppSetting()
    {
        OnSaveAppSetting.InvokeAsync(FormData);
    }

    void DeleteAppSetting()
    {
        OnDeleteAppSetting.InvokeAsync(FormData);
    }



}

