//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.IO;
using Microsoft.AspNetCore.Authorization;
// using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Ark.ResultCheckers.Data;
using Ark.ResultCheckers.Data.Services;
using Ark.ResultCheckers.Entities;
using Ark.ResultCheckers.Dtos;
using Ark.ResultCheckers.Dtos.Caches;

namespace Ark.ResultCheckers.Api1.Controllers
{
    [Route("api1/[controller]")]    
    [ApiController]
    // [Produces("application/json")]
    // [Route("api/Courses")]    
    // [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Authorize]
    public partial class CoursesController : ApiController
    {
        CourseService courseService;
    
        public CoursesController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, CourseService courseService) : base(context, env, memoryCache)
        {
            this.courseService = courseService;
        }
    
        // GET: api/Courses
        [HttpGet]
        public async Task<ActionResult<IEnumerable<CourseDto>>> GetCourses(string searchText = null
            , string code  = null
            , string title  = null
            , double? unit  = null
    		/*, int pageNumber=1, int pageSize=7*/)
        {
    
            // var courses = _context.Courses.Select(CourseDto.AsCourseDto);
            List<Expression<Func<CourseDto, bool>>> filters = null; 
    
            if (String.IsNullOrEmpty(searchText)
                && (String.IsNullOrEmpty(code))
                && (String.IsNullOrEmpty(title))
                && (unit == null)
    		
            )
            {
                // return null;
            }
            else
            {
                filters = new List<Expression<Func<CourseDto, bool>>>(); 
    
    		    if (!String.IsNullOrEmpty(searchText))
                {
    			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
    			    {
    				    filters.Add(x => x.Id.ToString().Contains(searchText));
    			    }
                }
                
                if(!String.IsNullOrEmpty(code))
                { 
                    filters.Add(x => x.Code == code);  
                }
                
                if(!String.IsNullOrEmpty(title))
                { 
                    filters.Add(x => x.Title == title);  
                }
                
                if(unit != null)
                { 
                    filters.Add(x => x.Unit == unit);  
                }
    		
            }
    
            //sort
            //return courses.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);
    
    		// OnSelectQuery(ref courses);
    
            // return await courses.ToListAsync();
    
            if (filters == null)
            {
                return await courseService.GetCourseDtoesAsync(CourseDto.IncludeNavigations());
            }
            else
            {
                return await courseService.GetCourseDtoesAsync(CourseDto.IncludeNavigations(), filters.ToArray());
            }
    
        }
    
    	partial void OnSelectQuery(ref IQueryable<CourseDto> courses);
    
    
        // GET: api/Courses/5
        [HttpGet("{id}")]
        public async Task<ActionResult<CourseDto>> GetCourse(int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var course = await courseService.GetCourseDtoAsync(id, CourseDto.IncludeNavigations());
    
            if (course == null)
            {
                return NotFound();
            }
    
            return course;
        }
    
        // PUT: api/Courses/5
        [HttpPut("{id}")]
    	public async Task<IActionResult> PutCourse(int id, CourseDto course)
    	{
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            if (id != course.Id)
            {
                return BadRequest();
            }
    
            try
            {
    
                var updated = await courseService.UpdateCourseAsync(course, User.Identity.Name);
                
                if (updated)
                {
                    this.RemoveCache(CacheKeys.Course);
                }
                else
                {
                    return BadRequest("Update failed!.");
                }
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!CourseExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
    
            return NoContent();
    		// return Ok(course);
        }
    
        // POST: api/Courses
        [HttpPost]
        public async Task<ActionResult<CourseDto>> PostCourse(CourseDto course)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            CourseDto courseDto;
            try
            {
                
                courseDto = await courseService.CreateCourseAsync(course, User.Identity.Name);            
            
                if (courseDto != null)
                {
                    this.RemoveCache(CacheKeys.Course);
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }   
    
            // var courseDto = await _context.Courses.Select(CourseDto.AsCourseDto).SingleOrDefaultAsync(m => m.Id == course.Id);
    
            return CreatedAtAction("GetCourse", new { id = courseDto.Id }, courseDto);
        }
    
        // DELETE: api/Courses/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<CourseDto>> DeleteCourse(int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var courseDto = await _context.Courses.Select(CourseDto.AsCourseDto).SingleOrDefaultAsync(m => m.Id == id);
           
            if (courseDto == null)
            {
                return NotFound();
            }
    
            // var course = CourseDto.AsCourseFunc(courseDto);
    
            // _context.Courses.Remove(course);
    
            // await SaveChangesAndRemoveCacheAsync(CacheKeys.Course);
            try
            {
                var deleted = await courseService.DeleteCourseAsync(courseDto);
    
                if (deleted)
                {
                    this.RemoveCache(CacheKeys.Course);
                }
                else
                {
                    return BadRequest("Delete failed!.");
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }  
    
            return courseDto;
        }
    
        private bool CourseExists(int id)
        {
            return _context.Courses.Any(e => e.Id == id);
        }
    
    	
    	// GET: api/Courses/Cache
        [AllowAnonymous]
        [HttpGet("Cache")]
        public IEnumerable<CourseCache> GetCacheCourses()
        {
            return this.CacheCourses();
        }
        
        
    }
}
