//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.IO;
using Microsoft.AspNetCore.Authorization;
// using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Ark.ResultCheckers.Data;
using Ark.ResultCheckers.Data.Services;
using Ark.ResultCheckers.Entities;
using Ark.ResultCheckers.Dtos;
using Ark.ResultCheckers.Dtos.Caches;

namespace Ark.ResultCheckers.Api1.Controllers
{
    [Route("api1/[controller]")]    
    [ApiController]
    // [Produces("application/json")]
    // [Route("api/StudentCourses")]    
    // [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Authorize]
    public partial class StudentCoursesController : ApiController
    {
        StudentCourseService studentCourseService;
    
        public StudentCoursesController(AppDbContext context, IWebHostEnvironment env, IMemoryCache memoryCache, StudentCourseService studentCourseService) : base(context, env, memoryCache)
        {
            this.studentCourseService = studentCourseService;
        }
    
        // GET: api/StudentCourses
        [HttpGet]
        public async Task<ActionResult<IEnumerable<StudentCourseDto>>> GetStudentCourses(string searchText = null
            , int? sessionId  = null
            , int? semesterId  = null
            , int? studentId  = null
            , int? courseId  = null
            , double? score  = null
    	// +navigation
            // +Student
    	, string studentMatricNo = null
    	, string studentDescription = null //Basic-Nav-Property
    	// -Student
            // +Course
    	, string courseCode = null
    	, string courseDescription = null //Basic-Nav-Property
    	// -Course
            // +Session
    	, string sessionName = null
    	// -Session
            // +Semester
    	, string semesterName = null
    	// -Semester
    	// -navigation
    		/*, int pageNumber=1, int pageSize=7*/)
        {
    
            // var studentCourses = _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto);
            List<Expression<Func<StudentCourseDto, bool>>> filters = null; 
    
            if (String.IsNullOrEmpty(searchText)
                && (sessionId == null)
                && (semesterId == null)
                && (studentId == null)
                && (courseId == null)
                && (score == null)
    	        // +navigation
                // +Student
    	&& (String.IsNullOrEmpty(studentMatricNo))
    	&& (String.IsNullOrEmpty(studentDescription)) //Basic-Nav-Property
    	// -Student
                // +Course
    	&& (String.IsNullOrEmpty(courseCode))
    	&& (String.IsNullOrEmpty(courseDescription)) //Basic-Nav-Property
    	// -Course
                // +Session
    	&& (String.IsNullOrEmpty(sessionName))
    	// -Session
                // +Semester
    	&& (String.IsNullOrEmpty(semesterName))
    	// -Semester
    	        // -navigation
    		
            )
            {
                // return null;
            }
            else
            {
                filters = new List<Expression<Func<StudentCourseDto, bool>>>(); 
    
    		    if (!String.IsNullOrEmpty(searchText))
                {
    			    if (searchText.CompareTo("*") != 0 && searchText.CompareTo("%") != 0)
    			    {
    				    filters.Add(x => x.Id.ToString().Contains(searchText));
    			    }
                }
                
                if(sessionId != null)
                { 
                    filters.Add(x => x.SessionId == sessionId);  
                }
                
                if(semesterId != null)
                { 
                    filters.Add(x => x.SemesterId == semesterId);  
                }
                
                if(studentId != null)
                { 
                    filters.Add(x => x.StudentId == studentId);  
                }
                
                if(courseId != null)
                { 
                    filters.Add(x => x.CourseId == courseId);  
                }
                
                if(score != null)
                { 
                    filters.Add(x => x.Score == score);  
                }
    	        // +navigation
                // +Student
    	
                if(!String.IsNullOrEmpty(studentMatricNo))
                { 
                    filters.Add(x => x.StudentMatricNo == studentMatricNo);  
                }
    	
                if(!String.IsNullOrEmpty(studentDescription))
                { 
                    filters.Add(x => x.StudentDescription == studentDescription);  
                } //Basic-Nav-Property
    	// -Student
                // +Course
    	
                if(!String.IsNullOrEmpty(courseCode))
                { 
                    filters.Add(x => x.CourseCode == courseCode);  
                }
    	
                if(!String.IsNullOrEmpty(courseDescription))
                { 
                    filters.Add(x => x.CourseDescription == courseDescription);  
                } //Basic-Nav-Property
    	// -Course
                // +Session
    	
                if(!String.IsNullOrEmpty(sessionName))
                { 
                    filters.Add(x => x.SessionName == sessionName);  
                }
    	// -Session
                // +Semester
    	
                if(!String.IsNullOrEmpty(semesterName))
                { 
                    filters.Add(x => x.SemesterName == semesterName);  
                }
    	// -Semester
    	        // -navigation
    		
            }
    
            //sort
            //return studentCourses.OrderBy(o => o.Id).Skip(((pageNumber - 1) * pageSize)).Take(pageSize);
    
    		// OnSelectQuery(ref studentCourses);
    
            // return await studentCourses.ToListAsync();
    
            if (filters == null)
            {
                return await studentCourseService.GetStudentCourseDtoesAsync(StudentCourseDto.IncludeNavigations());
            }
            else
            {
                return await studentCourseService.GetStudentCourseDtoesAsync(StudentCourseDto.IncludeNavigations(), filters.ToArray());
            }
    
        }
    
    	partial void OnSelectQuery(ref IQueryable<StudentCourseDto> studentCourses);
    
    
        // GET: api/StudentCourses/5
        [HttpGet("{id}")]
        public async Task<ActionResult<StudentCourseDto>> GetStudentCourse(int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var studentCourse = await studentCourseService.GetStudentCourseDtoAsync(id, StudentCourseDto.IncludeNavigations());
    
            if (studentCourse == null)
            {
                return NotFound();
            }
    
            return studentCourse;
        }
    
        // PUT: api/StudentCourses/5
        [HttpPut("{id}")]
    	public async Task<IActionResult> PutStudentCourse(int id, StudentCourseDto studentCourse)
    	{
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            if (id != studentCourse.Id)
            {
                return BadRequest();
            }
    
            try
            {
    
                var updated = await studentCourseService.UpdateStudentCourseAsync(studentCourse, User.Identity.Name);
                
                if (updated)
                {
                    this.RemoveCache(CacheKeys.StudentCourse);
                }
                else
                {
                    return BadRequest("Update failed!.");
                }
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!StudentCourseExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
    
            return NoContent();
    		// return Ok(studentCourse);
        }
    
        // POST: api/StudentCourses
        [HttpPost]
        public async Task<ActionResult<StudentCourseDto>> PostStudentCourse(StudentCourseDto studentCourse)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            StudentCourseDto studentCourseDto;
            try
            {
                
                studentCourseDto = await studentCourseService.CreateStudentCourseAsync(studentCourse, User.Identity.Name);            
            
                if (studentCourseDto != null)
                {
                    this.RemoveCache(CacheKeys.StudentCourse);
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }   
    
            // var studentCourseDto = await _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto).SingleOrDefaultAsync(m => m.Id == studentCourse.Id);
    
            return CreatedAtAction("GetStudentCourse", new { id = studentCourseDto.Id }, studentCourseDto);
        }
    
        // DELETE: api/StudentCourses/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<StudentCourseDto>> DeleteStudentCourse(int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var studentCourseDto = await _context.StudentCourses.Select(StudentCourseDto.AsStudentCourseDto).SingleOrDefaultAsync(m => m.Id == id);
           
            if (studentCourseDto == null)
            {
                return NotFound();
            }
    
            // var studentCourse = StudentCourseDto.AsStudentCourseFunc(studentCourseDto);
    
            // _context.StudentCourses.Remove(studentCourse);
    
            // await SaveChangesAndRemoveCacheAsync(CacheKeys.StudentCourse);
            try
            {
                var deleted = await studentCourseService.DeleteStudentCourseAsync(studentCourseDto);
    
                if (deleted)
                {
                    this.RemoveCache(CacheKeys.StudentCourse);
                }
                else
                {
                    return BadRequest("Delete failed!.");
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }  
    
            return studentCourseDto;
        }
    
        private bool StudentCourseExists(int id)
        {
            return _context.StudentCourses.Any(e => e.Id == id);
        }
    
    	
    	// GET: api/StudentCourses/Cache
        [AllowAnonymous]
        [HttpGet("Cache")]
        public IEnumerable<StudentCourseCache> GetCacheStudentCourses()
        {
            return this.CacheStudentCourses();
        }
        
        
    }
}
